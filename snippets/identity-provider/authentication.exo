@postgres 
module UserModule {
    type User {
        @pk id: Int = autoIncrement()

        email: String     // login e-mail
        role: String      // user role
        name: String      // user's name (e.g. John Doe)

        password: String  // bcrypted password (if provided; will not be provided for social logins)
        verified: Boolean // whether the user has verified their e-mail address (social logins will always be verified)
    }
}

@deno("auth-social.ts")
module LoginSocial {
    // Takes a code from client-side authentication and issues a JWT token on success
    export query loginSocial(code: String, provider: String, @inject exograph: Exograph): String

    // Given a code from client-side authentication, create a user in the database
    export mutation signupSocial(
        code: String, 
        provider: String,
        @inject exograph: Exograph
    ): Int
}

@deno("auth-normal.ts")
module LoginNormal {
    // Takes a login and a password from the client authentication and issues a JWT token on success
    export query loginNormal(email: String, password: String, @inject exograph: Exograph): String

    // Given an e-mail and a password, create a user in the database
    export mutation signupNormal(
        email: String, 
        password: String,
        name: String,
        @inject exograph: Exograph
    ): Int
}