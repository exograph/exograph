# Workflow to build binaries for all platforms, and if it is a release-tagged, upload them to the release
# Performs:
# - Build binaries for all platforms as well as aws-lambda (but not aarch64-apple-darwin, which is done outside of CI until Github supports this platform)
# - Run integration tests on all platforms
# - Upload binaries to release if it is a release-tagged commit (but as a pre-release)

# After this workflow is run:
# - Build aarch64-apple-darwin binaries on a Mac and upload them to the release
# - Using the Github UI (or the `gh` cli), promote this to a release
# - (This, in turn, will trigger the build-docker workflow)

name: Build Binaries

on:
  push:
    branches: ["main"]
    tags:
      - "*"

jobs:
  # Build and packages all the things
  build-artifacts:
    strategy:
      fail-fast: false
      matrix:
        # For these target platforms
        include:
          - os: macos-11
            deps-script: brew install protobuf
            target: x86_64-apple-darwin
            bin_extension: ""
          - os: ubuntu-20.04
            deps-script: sudo apt-get install -y protobuf-compiler
            target: x86_64-unknown-linux-gnu
            bin_extension: ""
          - os: windows-2019
            deps-script: choco install protoc
            target: x86_64-pc-windows-msvc
            bin_extension: ".exe"

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Clear up some disk space from the runner
        if: ${{ runner.os != 'Windows' }}
        run: |
          bash ${PWD}/.github/workflows/clear-disk-space.sh
      - name: Install deps
        run: ${{ matrix.deps-script }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Build
        run: |
          cargo build -p cli -p server-actix --target ${{ matrix.target }} --release --features not_cross
      - name: Add Postgres to PATH
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PGBIN" >> $GITHUB_PATH
          else
            echo "$(pg_config --bindir)" >> $GITHUB_PATH
          fi
        shell: bash
      - name: Test
        env:
          RUST_BACKTRACE: 1
          EXO_RUN_INTROSPECTION_TESTS: true
        run: target/${{matrix.target}}/release/exo${{matrix.bin_extension}} test integration-tests
      - name: Create zip of binaries
        run: |
          mkdir -p dist
          cp target/${{matrix.target}}/release/exo${{matrix.bin_extension}} dist/
          cp target/${{matrix.target}}/release/exo-server${{matrix.bin_extension}} dist/
          cp LICENSE dist/
          cd dist/
          7z a exograph-${{matrix.target}}.zip *
          cd ..
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: exograph-${{matrix.target}}.zip
          path: dist/exograph-${{matrix.target}}.zip
      - name: Upload zip to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/exograph-${{matrix.target}}.zip
          asset_name: exograph-${{matrix.target}}.zip
          tag: ${{ github.ref }}
          prerelease: true

  build-aws-lambda:
    runs-on: ubuntu-20.04
    container: amazonlinux:2023
    env:
      ARCH: aws-lambda-linux-2023-x86_64

    steps:
      - name: Install packages for building
        run: |
          yum install -y tar gzip zip unzip gcc make

          # Install protoc (the yum install version is 2.x, which is too old for grpc needed by opentelemetry)
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip
          unzip protoc-3.15.8-linux-x86_64.zip -d /root/.local
          echo "/root/.local/bin" >> $GITHUB_PATH

          # Need to install Rust manually (not through yum, which is a bit older version
          # and since it doesn't install rustup, it doesn't respect rust-toolchain.toml settings)
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none --profile minimal -y
          echo "/github/home/.cargo/bin" >> $GITHUB_PATH

      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Add Rust target
        run: rustup target add x86_64-unknown-linux-gnu
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.ARCH }}
      - name: Build
        run: |
          cargo build -p server-aws-lambda --target x86_64-unknown-linux-gnu --release
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/bootstrap dist/
      - name: Create zip of binaries
        run: |
          cp LICENSE dist/
          cd dist/
          zip exograph-${{ env.ARCH }}.zip *
          cd ..
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: exograph-${{ env.ARCH }}.zip
          path: dist/exograph-${{ env.ARCH }}.zip
      - name: Upload zip to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/exograph-${{ env.ARCH }}.zip
          asset_name: exograph-${{ env.ARCH }}.zip
          tag: ${{ github.ref }}
          prerelease: true
