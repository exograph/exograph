name: Process Release Notes

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to process'
        required: true
        type: string

permissions:
  contents: write

jobs:
  process-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process and format release notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            let releaseTag = context.eventName === 'release' ? context.payload.release.tag_name : context.inputs.tag;
            
            // Get the release by tag
            let release;
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: releaseTag
              });
              release = data;
            } catch (error) {
              console.error(`Could not find release with tag ${releaseTag}`);
              return;
            }
            
            // Function to clean up PR title
            function formatPRTitle(line) {
              // Match the original GitHub format with author
              let match = line.match(/^\* (.+?) by @\w+ in https:\/\/github\.com\/.+?\/pull\/(\d+)$/);
              
              // If not original format, check if it's already processed but with full URL
              if (!match) {
                match = line.match(/^\* (.+?) https:\/\/github\.com\/.+?\/pull\/(\d+)$/);
                if (!match) return line;
              }
              
              let title = match[1];
              const prNumber = match[2];
              
              // Keep conventional commit prefixes but capitalize the rest
              const prefixMatch = title.match(/^((?:feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(?:\(.+?\))?:\s*)(.+)$/i);
              if (prefixMatch) {
                const prefix = prefixMatch[1];
                const rest = prefixMatch[2];
                title = prefix + rest.charAt(0).toUpperCase() + rest.slice(1);
              } else {
                // No prefix, just capitalize first letter
                title = title.charAt(0).toUpperCase() + title.slice(1);
              }
              
              // Return formatted line without author
              return `* ${title} #${prNumber}`;
            }
            
            // Parse and format the release notes
            let body = release.body || '';
            
            // Split body into lines and process
            const lines = body.split('\n');
            const formattedLines = lines.map(line => {
              // Skip empty bullet points
              if (line.trim() === '*') {
                return null;
              }
              // Format lines that look like PR entries (both original and already processed)
              if (line.startsWith('* ') && line.includes('/pull/')) {
                return formatPRTitle(line);
              }
              return line;
            }).filter(line => line !== null);
            
            // Add spacing between sections
            body = formattedLines.join('\n');
            
            // Split into lines again and add spacing
            const finalLines = body.split('\n');
            const result = [];
            
            for (let i = 0; i < finalLines.length; i++) {
              result.push(finalLines[i]);
              
              // If current line is a bullet point and next line is a section header (###), add blank line
              if (finalLines[i].startsWith('* ') && 
                  i + 1 < finalLines.length && 
                  finalLines[i + 1].startsWith('### ')) {
                result.push('');
              }
            }
            
            body = result.join('\n');
            
            // Get list of contributors for this release
            const previousTag = await (async () => {
              const { data: tags } = await github.rest.repos.listTags({
                owner,
                repo,
                per_page: 100
              });
              
              const currentIndex = tags.findIndex(tag => tag.name === releaseTag);
              if (currentIndex > 0 && currentIndex < tags.length - 1) {
                return tags[currentIndex + 1].name;
              }
              return null;
            })();
            
            if (previousTag) {
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: previousTag,
                head: releaseTag
              });
              
              // Get all contributors
              const contributorSet = new Set();
              const firstTimeContributors = new Set();
              
              for (const commit of comparison.commits) {
                if (commit.author && commit.author.login) {
                  const login = commit.author.login;
                  if (!login.includes('[bot]') && login !== 'dependabot') {
                    contributorSet.add(login);
                    
                    // Check if this is a first-time contributor
                    try {
                      const { data: allCommits } = await github.rest.repos.listCommits({
                        owner,
                        repo,
                        author: login,
                        per_page: 2
                      });
                      
                      if (allCommits.length === 1) {
                        firstTimeContributors.add(login);
                      }
                    } catch (e) {
                      console.log(`Could not check commits for ${login}`);
                    }
                  }
                }
              }
              
              // Add first-time contributors section
              if (firstTimeContributors.size > 0) {
                const contributorsList = Array.from(firstTimeContributors)
                  .map(login => `@${login}`)
                  .join(', ');
                
                body += `\n\n## üéä New Contributors\nWelcome to our first-time contributors! Thank you for your contributions! üôè\n${contributorsList}`;
              }
            }
            
            // Update the release
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.id,
              body: body
            });
            
            console.log('Release notes processed successfully!');