name: Label PRs

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - name: Label PR based on first commit
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Always use the first commit message for labeling
            let commitMessage = '';
            try {
              const { execSync } = require('child_process');
              const baseCommit = execSync(`git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD`, { encoding: 'utf-8' }).trim();
              const firstCommit = execSync(`git rev-list --reverse ${baseCommit}..HEAD | head -1`, { encoding: 'utf-8' }).trim();
              commitMessage = execSync(`git log --format=%s -1 ${firstCommit}`, { encoding: 'utf-8' }).trim();
              
              console.log(`Using first commit message for labeling: "${commitMessage}"`);
            } catch (error) {
              console.log('Could not get first commit message:', error.message);
              console.log('Falling back to PR title:', pr.title);
              commitMessage = pr.title;
            }
            
            // Add labels based on first commit message
            const title = commitMessage.toLowerCase();
            const labels = [];
            
            // Map commit prefixes to labels based on .commitlintrc.json
            if (title.startsWith('feat:') || title.startsWith('feat(')) {
              labels.push('feat');
            } else if (title.startsWith('fix:') || title.startsWith('fix(')) {
              labels.push('fix');
            } else if (title.startsWith('security:') || title.startsWith('security(')) {
              labels.push('security');
            } else if (title.startsWith('release:') || title.startsWith('release(')) {
              labels.push('release');
            } else if (title.startsWith('breaking:') || title.startsWith('breaking(')) {
              labels.push('breaking');
            } else if (title.startsWith('docs:') || title.startsWith('docs(')) {
              labels.push('docs');
            } else if (title.startsWith('style:') || title.startsWith('style(')) {
              labels.push('style');
            } else if (title.startsWith('refactor:') || title.startsWith('refactor(')) {
              labels.push('refactor');
            } else if (title.startsWith('perf:') || title.startsWith('perf(')) {
              labels.push('perf');
            } else if (title.startsWith('test:') || title.startsWith('test(')) {
              labels.push('test');
            } else if (title.startsWith('build:') || title.startsWith('build(')) {
              labels.push('build');
            } else if (title.startsWith('ci:') || title.startsWith('ci(')) {
              labels.push('ci');
            } else if (title.startsWith('chore:') || title.startsWith('chore(')) {
              labels.push('chore');
            } else if (title.startsWith('revert:') || title.startsWith('revert(')) {
              labels.push('revert');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
            }