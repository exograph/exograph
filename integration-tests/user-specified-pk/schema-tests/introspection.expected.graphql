type Department {
  id: String!
  name: String!
  products(where: ProductFilter, orderBy: [ProductOrdering!], limit: Int, offset: Int): [Product!]
  productsAgg(where: ProductFilter): ProductAgg
}

"""An aggregate for the `Department` type."""
type DepartmentAgg {
  id: StringAgg
  name: StringAgg
}

input DepartmentCreationInput {
  id: String!
  name: String!
  products: [ProductCreationInputFromDepartment!]
}

"""
Predicate for the `Department` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input DepartmentFilter {
  id: StringFilter
  name: StringFilter
  products: ProductFilter
  and: [DepartmentFilter!]
  or: [DepartmentFilter!]
  not: DepartmentFilter
}

input DepartmentOrdering {
  id: Ordering
  name: Ordering
}

input DepartmentReferenceInput {
  id: String!
}

input DepartmentUpdateInput {
  id: String
  name: String
  products: ProductUpdateInputFromDepartment
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Product {
  id: Int!
  title: String!
  department: Department!
}

"""An aggregate for the `Product` type."""
type ProductAgg {
  id: IntAgg
  title: StringAgg
}

input ProductCreationInput {
  id: Int!
  title: String!
  department: DepartmentReferenceInput!
}

input ProductCreationInputFromDepartment {
  id: Int!
  title: String!
}

"""
Predicate for the `Product` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ProductFilter {
  id: IntFilter
  title: StringFilter
  department: DepartmentFilter
  and: [ProductFilter!]
  or: [ProductFilter!]
  not: ProductFilter
}

input ProductOrdering {
  id: Ordering
  title: Ordering
  department: [DepartmentOrdering!]
}

input ProductReferenceInput {
  id: Int!
}

input ProductUpdateInput {
  id: Int
  title: String
  department: DepartmentReferenceInput
}

input ProductUpdateInputFromDepartment {
  create: [ProductCreationInputFromDepartment!]
  update: [ProductUpdateInputFromDepartmentNested!]
  delete: [ProductReferenceInput!]
}

input ProductUpdateInputFromDepartmentNested {
  id: Int!
  title: String
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Department` given primary key fields"""
  department(id: String!): Department

  """
  Get multiple `Department`s given the provided `where` filter, order by, limit, and offset
  """
  departments(where: DepartmentFilter, orderBy: [DepartmentOrdering!], limit: Int, offset: Int): [Department!]!

  """
  Get the aggregate value of the selected fields over all `Department`s given the provided `where` filter
  """
  departmentsAgg(where: DepartmentFilter): DepartmentAgg!

  """Get a single `Product` given primary key fields"""
  product(id: Int!): Product

  """
  Get multiple `Product`s given the provided `where` filter, order by, limit, and offset
  """
  products(where: ProductFilter, orderBy: [ProductOrdering!], limit: Int, offset: Int): [Product!]!

  """
  Get the aggregate value of the selected fields over all `Product`s given the provided `where` filter
  """
  productsAgg(where: ProductFilter): ProductAgg!
}

type Mutation {
  """
  Create a new Department. Check the `DepartmentCreationInput` type for the expected shape of the data.
  """
  createDepartment(data: DepartmentCreationInput!): Department!

  """
  Create multiple Departments. Check the `DepartmentCreationInput` type for the expected shape of the data.
  """
  createDepartments(data: [DepartmentCreationInput!]!): [Department!]!

  """
  Create a new Product. Check the `ProductCreationInput` type for the expected shape of the data.
  """
  createProduct(data: ProductCreationInput!): Product!

  """
  Create multiple Products. Check the `ProductCreationInput` type for the expected shape of the data.
  """
  createProducts(data: [ProductCreationInput!]!): [Product!]!

  """Delete the Department with the provided primary key."""
  deleteDepartment(id: String!): Department

  """Delete multiple Departments matching the provided `where` filter."""
  deleteDepartments(where: DepartmentFilter): [Department!]!

  """Delete the Product with the provided primary key."""
  deleteProduct(id: Int!): Product

  """Delete multiple Products matching the provided `where` filter."""
  deleteProducts(where: ProductFilter): [Product!]!

  """
  Update the Department with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateDepartment(id: String!, data: DepartmentUpdateInput!): Department

  """
  Update multiple Departments matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateDepartments(where: DepartmentFilter, data: DepartmentUpdateInput!): [Department!]!

  """
  Update the Product with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateProduct(id: Int!, data: ProductUpdateInput!): Product

  """
  Update multiple Products matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateProducts(where: ProductFilter, data: ProductUpdateInput!): [Product!]!
}