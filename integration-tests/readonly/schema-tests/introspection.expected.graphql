type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

type Document {
  id: Int!
  title: String!
  ownerId: Int!
}

"""An aggregate for the `Document` type."""
type DocumentAgg {
  id: IntAgg
  title: StringAgg
  ownerId: IntAgg
}

input DocumentCreationInput {
  title: String!
}

"""
Predicate for the `Document` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input DocumentFilter {
  id: IntFilter
  title: StringFilter
  ownerId: IntFilter
  and: [DocumentFilter!]
  or: [DocumentFilter!]
  not: DocumentFilter
}

input DocumentOrdering {
  id: Ordering
  title: Ordering
  ownerId: Ordering
}

input DocumentUpdateInput {
  id: Int
  title: String
}

scalar Instant

type InstantAgg {
  count: Int
}

input InstantFilter {
  eq: Instant
  neq: Instant
  lt: Instant
  lte: Instant
  gt: Instant
  gte: Instant
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Todo {
  id: Int!
  title: String!
  completed: Boolean!
  createdAt: Instant!
}

"""An aggregate for the `Todo` type."""
type TodoAgg {
  id: IntAgg
  title: StringAgg
  completed: BooleanAgg
  createdAt: InstantAgg
}

input TodoCreationInput {
  title: String!
  completed: Boolean!
}

"""
Predicate for the `Todo` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input TodoFilter {
  id: IntFilter
  title: StringFilter
  completed: BooleanFilter
  createdAt: InstantFilter
  and: [TodoFilter!]
  or: [TodoFilter!]
  not: TodoFilter
}

input TodoOrdering {
  id: Ordering
  title: Ordering
  completed: Ordering
  createdAt: Ordering
}

input TodoUpdateInput {
  id: Int
  title: String
  completed: Boolean
}

type Query {
  """Get a single `Document` given primary key fields"""
  document(id: Int!): Document

  """
  Get multiple `Document`s given the provided `where` filter, order by, limit, and offset
  """
  documents(where: DocumentFilter, orderBy: [DocumentOrdering!], limit: Int, offset: Int): [Document!]!

  """
  Get the aggregate value of the selected fields over all `Document`s given the provided `where` filter
  """
  documentsAgg(where: DocumentFilter): DocumentAgg!

  """Get a single `Todo` given primary key fields"""
  todo(id: Int!): Todo

  """
  Get multiple `Todo`s given the provided `where` filter, order by, limit, and offset
  """
  todos(where: TodoFilter, orderBy: [TodoOrdering!], limit: Int, offset: Int): [Todo!]!

  """
  Get the aggregate value of the selected fields over all `Todo`s given the provided `where` filter
  """
  todosAgg(where: TodoFilter): TodoAgg!
}

type Mutation {
  """
  Create a new Document. Check the `DocumentCreationInput` type for the expected shape of the data.
  """
  createDocument(data: DocumentCreationInput!): Document!

  """
  Create multiple Documents. Check the `DocumentCreationInput` type for the expected shape of the data.
  """
  createDocuments(data: [DocumentCreationInput!]!): [Document!]!

  """
  Create a new Todo. Check the `TodoCreationInput` type for the expected shape of the data.
  """
  createTodo(data: TodoCreationInput!): Todo!

  """
  Create multiple Todos. Check the `TodoCreationInput` type for the expected shape of the data.
  """
  createTodos(data: [TodoCreationInput!]!): [Todo!]!

  """Delete the Document with the provided primary key."""
  deleteDocument(id: Int!): Document

  """Delete multiple Documents matching the provided `where` filter."""
  deleteDocuments(where: DocumentFilter): [Document!]!

  """Delete the Todo with the provided primary key."""
  deleteTodo(id: Int!): Todo

  """Delete multiple Todos matching the provided `where` filter."""
  deleteTodos(where: TodoFilter): [Todo!]!

  """
  Update the Document with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateDocument(id: Int!, data: DocumentUpdateInput!): Document

  """
  Update multiple Documents matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateDocuments(where: DocumentFilter, data: DocumentUpdateInput!): [Document!]!

  """
  Update the Todo with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateTodo(id: Int!, data: TodoUpdateInput!): Todo

  """
  Update multiple Todos matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateTodos(where: TodoFilter, data: TodoUpdateInput!): [Todo!]!
}