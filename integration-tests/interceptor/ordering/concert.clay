@postgres
service ConcertVenues {
  @access(true)
  type Concert {
    @pk id: Int = autoincrement()
    title: String
    @column("venueid") venue: Venue 
    published: Boolean
    @precision(20) @scale(2) price: Decimal 
  }

  @access(true)
  type Venue {
    @pk id: Int = autoincrement()
    name: String
    @column("venueid") concerts: Set<Concert>? 
    published: Boolean
    @size(4) latitude: Float 
  }
}

@postgres
service LogService {
  @access(true)
  type Log {
    @pk id: Int = autoincrement()
    message: String
  }
}

@deno("log.js")
service Logging {
  @before("mutation *Concert*")
  interceptor enterConcertMutation(operation: Operation, claytip: Claytip)

  @before("mutation *Venue*")
  interceptor enterVenueMutation(operation: Operation, claytip: Claytip)

  @after("mutation *Concert*")
  interceptor exitConcertMutation(operation: Operation, claytip: Claytip)

  @after("mutation *Venue*")
  interceptor exitVenueMutation(operation: Operation, claytip: Claytip)

  // Put an `after` interceptor ahead of the `before` interceptor to test that the `before` interceptor
  // still applies before the `after` interceptor.
  @after("query *")
  interceptor exitQuery(operation: Operation, claytip: Claytip)

  @before("query *")
  interceptor enterQuery(operation: Operation, claytip: Claytip)

  @around("query *")
  interceptor rateLimitingQuery(operation: Operation, claytip: Claytip)

  @around("query *")
  interceptor timingQuery(operation: Operation, claytip: Claytip)

  // TODO: Make this work
  // @before("mutation *" && !"mutation *Log")
  // interceptor enterMutation(operation: Operation, claytip: Claytip)
}