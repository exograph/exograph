context AuthContext {
  @jwt("sub") id: Int 
  @jwt("role") role: String 
}

@postgres
module DocumentModule {
  // A user may own multiple documents
  @access(true) // Setting access to true to focus on the access rules for the documents
  type User {
    @pk id: Int = autoIncrement()
    name: String
    documents: Set<Document>?
  }
  
  // Admin can do anything
  // User can only query/mutate their own documents
  @access(AuthContext.role == "ADMIN" || AuthContext.id == self.user.id)
  type Document {
    @pk id: Int = autoIncrement()
    content: String
    user: User
  }
}

// self.user.id = AuthContext.id
// user ... where id = 2

// self.user.id = self.foo
// user.id = 17

// self.user.id = AuthContext.id || self.foo

// @access(self.user.id = self.user.sender_id || self.foo > 5) type Document { foo: Int, user: User }
// self.id = self.sender_id || self.foo > 5
// self.id = self.sender_id || undefined > 5
// self.id = self.sender_id || undefined
// self.id = self.sender_id
// -> where self.id = self.sender_id

// self.user.id = self.user.sender_id && self.foo > 5
// self.id = self.sender_id && undefined > 5
// self.id = self.sender_id && undefined
// undefined

// self.user.id = self.user.sender_id && !(self.foo > self.bar)
// self.id = self.sender_id && !(undefined > 5)
// self.id = self.sender_id && !(undefined)
// self.id = self.sender_id && undefined
// self.id = self.sender_id

// @access(self.user.id = self.foo) type Document { foo: Int }
// self.id = undefined