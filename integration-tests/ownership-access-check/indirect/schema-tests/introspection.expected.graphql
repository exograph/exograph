enum Ordering {
  ASC
  DESC
}

type Project {
  id: Uuid!
  name: String!
  owner: User!
  questions(where: QuestionFilter, orderBy: [QuestionOrdering!], limit: Int, offset: Int): [Question!]
  questionsAgg(where: QuestionFilter): QuestionAgg
}

type ProjectAgg {
  id: UuidAgg
  name: StringAgg
}

input ProjectCreationInput {
  id: Uuid
  name: String!
  owner: UserReferenceInput!
  questions: [QuestionCreationInputFromProject!]
}

input ProjectCreationInputFromUser {
  id: Uuid
  name: String!
  questions: [QuestionCreationInputFromProject!]
}

input ProjectFilter {
  id: UuidFilter
  name: StringFilter
  owner: UserFilter
  questions: QuestionFilter
  and: [ProjectFilter!]
  or: [ProjectFilter!]
  not: ProjectFilter
}

input ProjectOrdering {
  id: Ordering
  name: Ordering
  owner: [UserOrdering!]
}

input ProjectReferenceInput {
  id: Uuid!
}

input ProjectUpdateInput {
  id: Uuid
  name: String
  owner: UserReferenceInput
  questions: QuestionUpdateInputFromProject
}

input ProjectUpdateInputFromUser {
  create: [ProjectCreationInputFromUser!]
  update: [ProjectUpdateInputFromUserNested!]
  delete: [ProjectReferenceInput!]
}

input ProjectUpdateInputFromUserNested {
  id: Uuid!
  name: String
  questions: QuestionUpdateInputFromProject
}

type Question {
  id: Uuid!
  text: String!
  project: Project!
}

type QuestionAgg {
  id: UuidAgg
  text: StringAgg
}

input QuestionCreationInput {
  id: Uuid
  text: String!
  project: ProjectReferenceInput!
}

input QuestionCreationInputFromProject {
  id: Uuid
  text: String!
}

input QuestionFilter {
  id: UuidFilter
  text: StringFilter
  project: ProjectFilter
  and: [QuestionFilter!]
  or: [QuestionFilter!]
  not: QuestionFilter
}

input QuestionOrdering {
  id: Ordering
  text: Ordering
  project: [ProjectOrdering!]
}

input QuestionReferenceInput {
  id: Uuid!
}

input QuestionUpdateInput {
  id: Uuid
  text: String
  project: ProjectReferenceInput
}

input QuestionUpdateInputFromProject {
  create: [QuestionCreationInputFromProject!]
  update: [QuestionUpdateInputFromProjectNested!]
  delete: [QuestionReferenceInput!]
}

input QuestionUpdateInputFromProjectNested {
  id: Uuid!
  text: String
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type User {
  id: Uuid!
  name: String!
  projects(where: ProjectFilter, orderBy: [ProjectOrdering!], limit: Int, offset: Int): [Project!]
  projectsAgg(where: ProjectFilter): ProjectAgg
}

type UserAgg {
  id: UuidAgg
  name: StringAgg
}

input UserCreationInput {
  id: Uuid
  name: String!
  projects: [ProjectCreationInputFromUser!]
}

input UserFilter {
  id: UuidFilter
  name: StringFilter
  projects: ProjectFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  name: Ordering
}

input UserReferenceInput {
  id: Uuid!
}

input UserUpdateInput {
  id: Uuid
  name: String
  projects: ProjectUpdateInputFromUser
}

scalar Uuid

type UuidAgg {
  count: Int
}

input UuidFilter {
  eq: Uuid
  neq: Uuid
}

type Query {
  project(id: Uuid!): Project
  projects(where: ProjectFilter, orderBy: [ProjectOrdering!], limit: Int, offset: Int): [Project!]!
  projectsAgg(where: ProjectFilter): ProjectAgg!
  question(id: Uuid!): Question
  questions(where: QuestionFilter, orderBy: [QuestionOrdering!], limit: Int, offset: Int): [Question!]!
  questionsAgg(where: QuestionFilter): QuestionAgg!
  user(id: Uuid!): User
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  createProject(data: ProjectCreationInput!): Project!
  createProjects(data: [ProjectCreationInput!]!): [Project!]!
  createQuestion(data: QuestionCreationInput!): Question!
  createQuestions(data: [QuestionCreationInput!]!): [Question!]!
  createUser(data: UserCreationInput!): User!
  createUsers(data: [UserCreationInput!]!): [User!]!
  deleteProject(id: Uuid!): Project
  deleteProjects(where: ProjectFilter): [Project!]!
  deleteQuestion(id: Uuid!): Question
  deleteQuestions(where: QuestionFilter): [Question!]!
  deleteUser(id: Uuid!): User
  deleteUsers(where: UserFilter): [User!]!
  updateProject(id: Uuid!, data: ProjectUpdateInput!): Project
  updateProjects(where: ProjectFilter, data: ProjectUpdateInput!): [Project!]!
  updateQuestion(id: Uuid!, data: QuestionUpdateInput!): Question
  updateQuestions(where: QuestionFilter, data: QuestionUpdateInput!): [Question!]!
  updateUser(id: Uuid!, data: UserUpdateInput!): User
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}