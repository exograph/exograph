enum Ordering {
  ASC
  DESC
}

type Project {
  id: Uuid!
  name: String!
  owner: User!
  questions(where: QuestionFilter, orderBy: [QuestionOrdering!], limit: Int, offset: Int): [Question!]
  questionsAgg(where: QuestionFilter): QuestionAgg
}

"""An aggregate for the `Project` type."""
type ProjectAgg {
  id: UuidAgg
  name: StringAgg
}

input ProjectCreationInput {
  id: Uuid
  name: String!
  owner: UserReferenceInput!
  questions: [QuestionCreationInputFromProject!]
}

input ProjectCreationInputFromUser {
  id: Uuid
  name: String!
  questions: [QuestionCreationInputFromProject!]
}

"""
Predicate for the `Project` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ProjectFilter {
  id: UuidFilter
  name: StringFilter
  owner: UserFilter
  questions: QuestionFilter
  and: [ProjectFilter!]
  or: [ProjectFilter!]
  not: ProjectFilter
}

input ProjectOrdering {
  id: Ordering
  name: Ordering
  owner: [UserOrdering!]
}

input ProjectReferenceInput {
  id: Uuid!
}

input ProjectUpdateInput {
  id: Uuid
  name: String
  owner: UserReferenceInput
  questions: QuestionUpdateInputFromProject
}

input ProjectUpdateInputFromUser {
  create: [ProjectCreationInputFromUser!]
  update: [ProjectUpdateInputFromUserNested!]
  delete: [ProjectReferenceInput!]
}

input ProjectUpdateInputFromUserNested {
  id: Uuid!
  name: String
  questions: QuestionUpdateInputFromProject
}

type Question {
  id: Uuid!
  text: String!
  project: Project!
}

"""An aggregate for the `Question` type."""
type QuestionAgg {
  id: UuidAgg
  text: StringAgg
}

input QuestionCreationInput {
  id: Uuid
  text: String!
  project: ProjectReferenceInput!
}

input QuestionCreationInputFromProject {
  id: Uuid
  text: String!
}

"""
Predicate for the `Question` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input QuestionFilter {
  id: UuidFilter
  text: StringFilter
  project: ProjectFilter
  and: [QuestionFilter!]
  or: [QuestionFilter!]
  not: QuestionFilter
}

input QuestionOrdering {
  id: Ordering
  text: Ordering
  project: [ProjectOrdering!]
}

input QuestionReferenceInput {
  id: Uuid!
}

input QuestionUpdateInput {
  id: Uuid
  text: String
  project: ProjectReferenceInput
}

input QuestionUpdateInputFromProject {
  create: [QuestionCreationInputFromProject!]
  update: [QuestionUpdateInputFromProjectNested!]
  delete: [QuestionReferenceInput!]
}

input QuestionUpdateInputFromProjectNested {
  id: Uuid!
  text: String
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type User {
  id: Uuid!
  name: String!
  projects(where: ProjectFilter, orderBy: [ProjectOrdering!], limit: Int, offset: Int): [Project!]
  projectsAgg(where: ProjectFilter): ProjectAgg
}

"""An aggregate for the `User` type."""
type UserAgg {
  id: UuidAgg
  name: StringAgg
}

input UserCreationInput {
  id: Uuid
  name: String!
  projects: [ProjectCreationInputFromUser!]
}

"""
Predicate for the `User` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input UserFilter {
  id: UuidFilter
  name: StringFilter
  projects: ProjectFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  name: Ordering
}

input UserReferenceInput {
  id: Uuid!
}

input UserUpdateInput {
  id: Uuid
  name: String
  projects: ProjectUpdateInputFromUser
}

scalar Uuid

type UuidAgg {
  count: Int
}

input UuidFilter {
  eq: Uuid
  neq: Uuid
}

type Query {
  """Get a single `Project` given primary key fields"""
  project(id: Uuid!): Project

  """
  Get multiple `Project`s given the provided `where` filter, order by, limit, and offset
  """
  projects(where: ProjectFilter, orderBy: [ProjectOrdering!], limit: Int, offset: Int): [Project!]!

  """
  Get the aggregate value of the selected fields over all `Project`s given the provided `where` filter
  """
  projectsAgg(where: ProjectFilter): ProjectAgg!

  """Get a single `Question` given primary key fields"""
  question(id: Uuid!): Question

  """
  Get multiple `Question`s given the provided `where` filter, order by, limit, and offset
  """
  questions(where: QuestionFilter, orderBy: [QuestionOrdering!], limit: Int, offset: Int): [Question!]!

  """
  Get the aggregate value of the selected fields over all `Question`s given the provided `where` filter
  """
  questionsAgg(where: QuestionFilter): QuestionAgg!

  """Get a single `User` given primary key fields"""
  user(id: Uuid!): User

  """
  Get multiple `User`s given the provided `where` filter, order by, limit, and offset
  """
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!

  """
  Get the aggregate value of the selected fields over all `User`s given the provided `where` filter
  """
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  """
  Create a new Project. Check the `ProjectCreationInput` type for the expected shape of the data.
  """
  createProject(data: ProjectCreationInput!): Project!

  """
  Create multiple Projects. Check the `ProjectCreationInput` type for the expected shape of the data.
  """
  createProjects(data: [ProjectCreationInput!]!): [Project!]!

  """
  Create a new Question. Check the `QuestionCreationInput` type for the expected shape of the data.
  """
  createQuestion(data: QuestionCreationInput!): Question!

  """
  Create multiple Questions. Check the `QuestionCreationInput` type for the expected shape of the data.
  """
  createQuestions(data: [QuestionCreationInput!]!): [Question!]!

  """
  Create a new User. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUser(data: UserCreationInput!): User!

  """
  Create multiple Users. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUsers(data: [UserCreationInput!]!): [User!]!

  """Delete the Project with the provided primary key."""
  deleteProject(id: Uuid!): Project

  """Delete multiple Projects matching the provided `where` filter."""
  deleteProjects(where: ProjectFilter): [Project!]!

  """Delete the Question with the provided primary key."""
  deleteQuestion(id: Uuid!): Question

  """Delete multiple Questions matching the provided `where` filter."""
  deleteQuestions(where: QuestionFilter): [Question!]!

  """Delete the User with the provided primary key."""
  deleteUser(id: Uuid!): User

  """Delete multiple Users matching the provided `where` filter."""
  deleteUsers(where: UserFilter): [User!]!

  """
  Update the Project with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateProject(id: Uuid!, data: ProjectUpdateInput!): Project

  """
  Update multiple Projects matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateProjects(where: ProjectFilter, data: ProjectUpdateInput!): [Project!]!

  """
  Update the Question with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateQuestion(id: Uuid!, data: QuestionUpdateInput!): Question

  """
  Update multiple Questions matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateQuestions(where: QuestionFilter, data: QuestionUpdateInput!): [Question!]!

  """
  Update the User with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateUser(id: Uuid!, data: UserUpdateInput!): User

  """
  Update multiple Users matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}