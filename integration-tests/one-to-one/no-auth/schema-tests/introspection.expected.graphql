type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Membership {
  id: Int!
  kind: String!
  user: User!
}

"""An aggregate for the `Membership` type."""
type MembershipAgg {
  id: IntAgg
  kind: StringAgg
}

input MembershipCreationInput {
  kind: String!
  user: UserReferenceInput!
}

input MembershipCreationInputFromUser {
  kind: String!
}

"""
Predicate for the `Membership` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input MembershipFilter {
  id: IntFilter
  kind: StringFilter
  user: UserFilter
  and: [MembershipFilter!]
  or: [MembershipFilter!]
  not: MembershipFilter
}

input MembershipOrdering {
  id: Ordering
  kind: Ordering
  user: [UserOrdering!]
}

input MembershipReferenceInput {
  id: Int!
}

input MembershipUpdateInput {
  id: Int
  kind: String
  user: UserReferenceInput
}

input MembershipUpdateInputFromUser {
  create: [MembershipCreationInputFromUser!]
  update: [MembershipUpdateInputFromUserNested!]
  delete: [MembershipReferenceInput!]
}

input MembershipUpdateInputFromUserNested {
  id: Int!
  kind: String
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  membership(where: MembershipFilter, orderBy: [MembershipOrdering!], limit: Int, offset: Int): Membership
}

"""An aggregate for the `User` type."""
type UserAgg {
  id: IntAgg
  name: StringAgg
}

input UserCreationInput {
  name: String!
  membership: [MembershipCreationInputFromUser!]
}

"""
Predicate for the `User` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input UserFilter {
  id: IntFilter
  name: StringFilter
  membership: MembershipFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  name: Ordering
  membership: [MembershipOrdering!]
}

input UserReferenceInput {
  id: Int!
}

"""A predicate to filter the results for a `User` type parameter."""
input UserUniqueFilter {
  id: Int!
}

input UserUpdateInput {
  id: Int
  name: String
  membership: MembershipUpdateInputFromUser
}

type Query {
  """Get a single `Membership` given primary key fields"""
  membership(id: Int!): Membership

  """Get a single `Membership` given unique fields"""
  membershipByUser(user: UserUniqueFilter!): Membership

  """
  Get multiple `Membership`s given the provided `where` filter, order by, limit, and offset
  """
  memberships(where: MembershipFilter, orderBy: [MembershipOrdering!], limit: Int, offset: Int): [Membership!]!

  """
  Get the aggregate value of the selected fields over all `Membership`s given the provided `where` filter
  """
  membershipsAgg(where: MembershipFilter): MembershipAgg!

  """Get a single `User` given primary key fields"""
  user(id: Int!): User

  """
  Get multiple `User`s given the provided `where` filter, order by, limit, and offset
  """
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!

  """
  Get the aggregate value of the selected fields over all `User`s given the provided `where` filter
  """
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  """
  Create a new Membership. Check the `MembershipCreationInput` type for the expected shape of the data.
  """
  createMembership(data: MembershipCreationInput!): Membership!

  """
  Create multiple Memberships. Check the `MembershipCreationInput` type for the expected shape of the data.
  """
  createMemberships(data: [MembershipCreationInput!]!): [Membership!]!

  """
  Create a new User. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUser(data: UserCreationInput!): User!

  """
  Create multiple Users. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUsers(data: [UserCreationInput!]!): [User!]!

  """Delete the Membership with the provided primary key."""
  deleteMembership(id: Int!): Membership

  """Delete multiple Memberships matching the provided `where` filter."""
  deleteMemberships(where: MembershipFilter): [Membership!]!

  """Delete the User with the provided primary key."""
  deleteUser(id: Int!): User

  """Delete multiple Users matching the provided `where` filter."""
  deleteUsers(where: UserFilter): [User!]!

  """
  Update the Membership with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateMembership(id: Int!, data: MembershipUpdateInput!): Membership

  """
  Update multiple Memberships matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateMemberships(where: MembershipFilter, data: MembershipUpdateInput!): [Membership!]!

  """
  Update the User with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateUser(id: Int!, data: UserUpdateInput!): User

  """
  Update multiple Users matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}