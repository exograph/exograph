type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

type Concert {
  id: Int!
  venue: Venue!
  title: String!
}

type ConcertAgg {
  id: IntAgg
  title: StringAgg
}

input ConcertCreationInput {
  venue: VenueReferenceInput!
  title: String!
}

input ConcertCreationInputFromVenue {
  title: String!
}

input ConcertFilter {
  id: IntFilter
  venue: VenueFilter
  title: StringFilter
  and: [ConcertFilter!]
  or: [ConcertFilter!]
  not: ConcertFilter
}

input ConcertOrdering {
  id: Ordering
  venue: [VenueOrdering!]
  title: Ordering
}

input ConcertReferenceInput {
  id: Int!
}

input ConcertUpdateInput {
  id: Int
  venue: VenueReferenceInput
  title: String
}

input ConcertUpdateInputFromVenue {
  create: [ConcertCreationInputFromVenue!]
  update: [ConcertUpdateInputFromVenueNested!]
  delete: [ConcertReferenceInput!]
}

input ConcertUpdateInputFromVenueNested {
  id: Int!
  title: String
}

type FloatAgg {
  min: Float
  max: Float
  sum: Float
  avg: Float
  count: Int
}

input FloatFilter {
  eq: Float
  neq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Venue {
  id: Int!
  name: String!
  published: Boolean!
  cost: Float
  concerts(where: ConcertFilter, orderBy: [ConcertOrdering!], limit: Int, offset: Int): [Concert!]
  concertsAgg(where: ConcertFilter): ConcertAgg
}

type VenueAgg {
  id: IntAgg
  name: StringAgg
  published: BooleanAgg
  cost: FloatAgg
}

input VenueCreationInput {
  name: String!
  published: Boolean!
  cost: Float
  concerts: [ConcertCreationInputFromVenue!]
}

input VenueFilter {
  id: IntFilter
  name: StringFilter
  published: BooleanFilter
  cost: FloatFilter
  concerts: ConcertFilter
  and: [VenueFilter!]
  or: [VenueFilter!]
  not: VenueFilter
}

input VenueOrdering {
  id: Ordering
  name: Ordering
  published: Ordering
  cost: Ordering
}

input VenueReferenceInput {
  id: Int!
}

input VenueUpdateInput {
  id: Int
  name: String
  published: Boolean
  cost: Float
  concerts: ConcertUpdateInputFromVenue
}

type Query {
  concert(id: Int!): Concert
  concerts(where: ConcertFilter, orderBy: [ConcertOrdering!], limit: Int, offset: Int): [Concert!]!
  concertsAgg(where: ConcertFilter): ConcertAgg!
  venue(id: Int!): Venue
  venues(where: VenueFilter, orderBy: [VenueOrdering!], limit: Int, offset: Int): [Venue!]!
  venuesAgg(where: VenueFilter): VenueAgg!
}

type Mutation {
  createConcert(data: ConcertCreationInput!): Concert!
  createConcerts(data: [ConcertCreationInput!]!): [Concert!]!
  createVenue(data: VenueCreationInput!): Venue!
  createVenues(data: [VenueCreationInput!]!): [Venue!]!
  deleteConcert(id: Int!): Concert
  deleteConcerts(where: ConcertFilter): [Concert!]!
  deleteVenue(id: Int!): Venue
  deleteVenues(where: VenueFilter): [Venue!]!
  updateConcert(id: Int!, data: ConcertUpdateInput!): Concert
  updateConcerts(where: ConcertFilter, data: ConcertUpdateInput!): [Concert!]!
  updateVenue(id: Int!, data: VenueUpdateInput!): Venue
  updateVenues(where: VenueFilter, data: VenueUpdateInput!): [Venue!]!
}