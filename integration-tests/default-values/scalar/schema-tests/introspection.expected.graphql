type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

type Event {
  id: Int!
  timestamp: Instant!
  category: String!
  priority: Int!
  message: String!
  is_system: Boolean!
  clientId: String!
  orgId: String
}

"""An aggregate for the `Event` type."""
type EventAgg {
  id: IntAgg
  timestamp: InstantAgg
  category: StringAgg
  priority: IntAgg
  message: StringAgg
  is_system: BooleanAgg
  clientId: StringAgg
  orgId: StringAgg
}

input EventCreationInput {
  timestamp: Instant
  category: String
  priority: Int
  message: String!
  is_system: Boolean
  clientId: String
  orgId: String
}

"""
Predicate for the `Event` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input EventFilter {
  id: IntFilter
  timestamp: InstantFilter
  category: StringFilter
  priority: IntFilter
  message: StringFilter
  is_system: BooleanFilter
  clientId: StringFilter
  orgId: StringFilter
  and: [EventFilter!]
  or: [EventFilter!]
  not: EventFilter
}

input EventOrdering {
  id: Ordering
  timestamp: Ordering
  category: Ordering
  priority: Ordering
  message: Ordering
  is_system: Ordering
  clientId: Ordering
  orgId: Ordering
}

input EventUpdateInput {
  id: Int
  timestamp: Instant
  category: String
  priority: Int
  message: String
  is_system: Boolean
  clientId: String
  orgId: String
}

scalar Instant

type InstantAgg {
  count: Int
}

input InstantFilter {
  eq: Instant
  neq: Instant
  lt: Instant
  lte: Instant
  gt: Instant
  gte: Instant
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Event` given primary key fields"""
  event(id: Int!): Event

  """
  Get multiple `Event`s given the provided `where` filter, order by, limit, and offset
  """
  events(where: EventFilter, orderBy: [EventOrdering!], limit: Int, offset: Int): [Event!]!

  """
  Get the aggregate value of the selected fields over all `Event`s given the provided `where` filter
  """
  eventsAgg(where: EventFilter): EventAgg!
}

type Mutation {
  """
  Create a new Event. Check the `EventCreationInput` type for the expected shape of the data.
  """
  createEvent(data: EventCreationInput!): Event!

  """
  Create multiple Events. Check the `EventCreationInput` type for the expected shape of the data.
  """
  createEvents(data: [EventCreationInput!]!): [Event!]!

  """Delete the Event with the provided primary key."""
  deleteEvent(id: Int!): Event

  """Delete multiple Events matching the provided `where` filter."""
  deleteEvents(where: EventFilter): [Event!]!

  """
  Update the Event with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateEvent(id: Int!, data: EventUpdateInput!): Event

  """
  Update multiple Events matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateEvents(where: EventFilter, data: EventUpdateInput!): [Event!]!
}