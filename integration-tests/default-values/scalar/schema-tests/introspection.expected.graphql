type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

scalar Decimal

type DecimalAgg {
  min: Decimal
  max: Decimal
  sum: Decimal
  avg: Decimal
  count: Int
}

input DecimalFilter {
  eq: Decimal
  neq: Decimal
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
}

type Event {
  id: Int!
  timestamp: Instant!
  category: String!
  priority: Int!
  price: Float!
  decimalPrice: Decimal!
  message: String!
  is_system: Boolean!
  clientId: String!
  orgId: String
}

"""An aggregate for the `Event` type."""
type EventAgg {
  id: IntAgg
  timestamp: InstantAgg
  category: StringAgg
  priority: IntAgg
  price: FloatAgg
  decimalPrice: DecimalAgg
  message: StringAgg
  is_system: BooleanAgg
  clientId: StringAgg
  orgId: StringAgg
}

input EventCreationInput {
  timestamp: Instant
  category: String
  priority: Int
  price: Float
  decimalPrice: Decimal
  message: String!
  is_system: Boolean
  clientId: String
  orgId: String
}

"""
Predicate for the `Event` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input EventFilter {
  id: IntFilter
  timestamp: InstantFilter
  category: StringFilter
  priority: IntFilter
  price: FloatFilter
  decimalPrice: DecimalFilter
  message: StringFilter
  is_system: BooleanFilter
  clientId: StringFilter
  orgId: StringFilter
  and: [EventFilter!]
  or: [EventFilter!]
  not: EventFilter
}

input EventOrdering {
  id: Ordering
  timestamp: Ordering
  category: Ordering
  priority: Ordering
  price: Ordering
  decimalPrice: Ordering
  message: Ordering
  is_system: Ordering
  clientId: Ordering
  orgId: Ordering
}

input EventUpdateInput {
  id: Int
  timestamp: Instant
  category: String
  priority: Int
  price: Float
  decimalPrice: Decimal
  message: String
  is_system: Boolean
  clientId: String
  orgId: String
}

type FloatAgg {
  min: Float
  max: Float
  sum: Float
  avg: Float
  count: Int
}

input FloatFilter {
  eq: Float
  neq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

scalar Instant

type InstantAgg {
  count: Int
}

input InstantFilter {
  eq: Instant
  neq: Instant
  lt: Instant
  lte: Instant
  gt: Instant
  gte: Instant
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Item {
  id: Int!
  name: String!
  purchasePrice: Float!
}

"""An aggregate for the `Item` type."""
type ItemAgg {
  id: IntAgg
  name: StringAgg
  purchasePrice: FloatAgg
}

input ItemCreationInput {
  name: String!
  purchasePrice: Float
}

"""
Predicate for the `Item` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ItemFilter {
  id: IntFilter
  name: StringFilter
  purchasePrice: FloatFilter
  and: [ItemFilter!]
  or: [ItemFilter!]
  not: ItemFilter
}

input ItemOrdering {
  id: Ordering
  name: Ordering
  purchasePrice: Ordering
}

input ItemUpdateInput {
  id: Int
  name: String
  purchasePrice: Float
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Event` given primary key fields"""
  event(id: Int!): Event

  """
  Get multiple `Event`s given the provided `where` filter, order by, limit, and offset
  """
  events(where: EventFilter, orderBy: [EventOrdering!], limit: Int, offset: Int): [Event!]!

  """
  Get the aggregate value of the selected fields over all `Event`s given the provided `where` filter
  """
  eventsAgg(where: EventFilter): EventAgg!

  """Get a single `Item` given primary key fields"""
  item(id: Int!): Item

  """
  Get multiple `Item`s given the provided `where` filter, order by, limit, and offset
  """
  items(where: ItemFilter, orderBy: [ItemOrdering!], limit: Int, offset: Int): [Item!]!

  """
  Get the aggregate value of the selected fields over all `Item`s given the provided `where` filter
  """
  itemsAgg(where: ItemFilter): ItemAgg!
}

type Mutation {
  """
  Create a new Event. Check the `EventCreationInput` type for the expected shape of the data.
  """
  createEvent(data: EventCreationInput!): Event!

  """
  Create multiple Events. Check the `EventCreationInput` type for the expected shape of the data.
  """
  createEvents(data: [EventCreationInput!]!): [Event!]!

  """
  Create a new Item. Check the `ItemCreationInput` type for the expected shape of the data.
  """
  createItem(data: ItemCreationInput!): Item!

  """
  Create multiple Items. Check the `ItemCreationInput` type for the expected shape of the data.
  """
  createItems(data: [ItemCreationInput!]!): [Item!]!

  """Delete the Event with the provided primary key."""
  deleteEvent(id: Int!): Event

  """Delete multiple Events matching the provided `where` filter."""
  deleteEvents(where: EventFilter): [Event!]!

  """Delete the Item with the provided primary key."""
  deleteItem(id: Int!): Item

  """Delete multiple Items matching the provided `where` filter."""
  deleteItems(where: ItemFilter): [Item!]!

  """
  Update the Event with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateEvent(id: Int!, data: EventUpdateInput!): Event

  """
  Update multiple Events matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateEvents(where: EventFilter, data: EventUpdateInput!): [Event!]!

  """
  Update the Item with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateItem(id: Int!, data: ItemUpdateInput!): Item

  """
  Update multiple Items matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateItems(where: ItemFilter, data: ItemUpdateInput!): [Item!]!
}