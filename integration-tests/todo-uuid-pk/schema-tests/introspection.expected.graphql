type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Todo {
  id: Uuid!
  title: String!
  completed: Boolean!
  user: User!
}

type TodoAgg {
  id: UuidAgg
  title: StringAgg
  completed: BooleanAgg
}

input TodoCreationInput {
  id: Uuid
  title: String!
  completed: Boolean!
  user: UserReferenceInput
}

input TodoCreationInputFromUser {
  id: Uuid
  title: String!
  completed: Boolean!
}

input TodoFilter {
  id: UuidFilter
  title: StringFilter
  completed: BooleanFilter
  user: UserFilter
  and: [TodoFilter!]
  or: [TodoFilter!]
  not: TodoFilter
}

input TodoOrdering {
  id: Ordering
  title: Ordering
  completed: Ordering
  user: [UserOrdering!]
}

input TodoReferenceInput {
  id: Uuid!
}

input TodoUpdateInput {
  id: Uuid
  title: String
  completed: Boolean
  user: UserReferenceInput
}

input TodoUpdateInputFromUser {
  create: [TodoCreationInputFromUser!]
  update: [TodoUpdateInputFromUserNested!]
  delete: [TodoReferenceInput!]
}

input TodoUpdateInputFromUserNested {
  id: Uuid!
  title: String
  completed: Boolean
}

type User {
  id: Uuid!
  email: String!
  firstName: String!
  lastName: String!
  profileImageUrl: String!
  role: String!
  todos(where: TodoFilter, orderBy: [TodoOrdering!], limit: Int, offset: Int): [Todo!]
  todosAgg(where: TodoFilter): TodoAgg
}

type UserAgg {
  id: UuidAgg
  email: StringAgg
  firstName: StringAgg
  lastName: StringAgg
  profileImageUrl: StringAgg
  role: StringAgg
}

input UserCreationInput {
  id: Uuid
  email: String!
  firstName: String!
  lastName: String!
  profileImageUrl: String!
  role: String
  todos: [TodoCreationInputFromUser!]
}

input UserFilter {
  id: UuidFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  profileImageUrl: StringFilter
  role: StringFilter
  todos: TodoFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  email: Ordering
  firstName: Ordering
  lastName: Ordering
  profileImageUrl: Ordering
  role: Ordering
}

input UserReferenceInput {
  id: Uuid!
}

input UserUpdateInput {
  id: Uuid
  email: String
  firstName: String
  lastName: String
  profileImageUrl: String
  role: String
  todos: TodoUpdateInputFromUser
}

scalar Uuid

type UuidAgg {
  count: Int
}

input UuidFilter {
  eq: Uuid
  neq: Uuid
}

type Query {
  todo(id: Uuid!): Todo
  todos(where: TodoFilter, orderBy: [TodoOrdering!], limit: Int, offset: Int): [Todo!]!
  todosAgg(where: TodoFilter): TodoAgg!
  user(id: Uuid!): User
  userByEmail(email: String!): User
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  createTodo(data: TodoCreationInput!): Todo!
  createTodos(data: [TodoCreationInput!]!): [Todo!]!
  createUser(data: UserCreationInput!): User!
  createUsers(data: [UserCreationInput!]!): [User!]!
  deleteTodo(id: Uuid!): Todo
  deleteTodos(where: TodoFilter): [Todo!]!
  deleteUser(id: Uuid!): User
  deleteUsers(where: UserFilter): [User!]!
  updateTodo(id: Uuid!, data: TodoUpdateInput!): Todo
  updateTodos(where: TodoFilter, data: TodoUpdateInput!): [Todo!]!
  updateUser(id: Uuid!, data: UserUpdateInput!): User
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}