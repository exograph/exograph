type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Log {
  id: Int!
  timestamp: Int!
  text: String!
}

"""An aggregate for the `Log` type."""
type LogAgg {
  id: IntAgg
  timestamp: IntAgg
  text: StringAgg
}

input LogCreationInput {
  timestamp: Int!
  text: String!
}

"""
Predicate for the `Log` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input LogFilter {
  id: IntFilter
  timestamp: IntFilter
  text: StringFilter
  and: [LogFilter!]
  or: [LogFilter!]
  not: LogFilter
}

input LogOrdering {
  id: Ordering
  timestamp: Ordering
  text: Ordering
}

input LogUpdateInput {
  id: Int
  timestamp: Int
  text: String
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Log` given primary key fields"""
  log(id: Int!): Log

  """
  Get multiple `Log`s given the provided `where` filter, order by, limit, and offset
  """
  logs(where: LogFilter, orderBy: [LogOrdering!], limit: Int, offset: Int): [Log!]!

  """
  Get the aggregate value of the selected fields over all `Log`s given the provided `where` filter
  """
  logsAgg(where: LogFilter): LogAgg!
}

type Mutation {
  """
  Create a new Log. Check the `LogCreationInput` type for the expected shape of the data.
  """
  createLog(data: LogCreationInput!): Log!

  """
  Create multiple Logs. Check the `LogCreationInput` type for the expected shape of the data.
  """
  createLogs(data: [LogCreationInput!]!): [Log!]!

  """Delete the Log with the provided primary key."""
  deleteLog(id: Int!): Log

  """Delete multiple Logs matching the provided `where` filter."""
  deleteLogs(where: LogFilter): [Log!]!

  """
  Update the Log with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateLog(id: Int!, data: LogUpdateInput!): Log

  """
  Update multiple Logs matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateLogs(where: LogFilter, data: LogUpdateInput!): [Log!]!
}