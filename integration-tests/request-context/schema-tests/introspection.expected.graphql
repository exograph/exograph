type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type JournalEntry {
  id: Int!
  text: String!
}

"""An aggregate for the `JournalEntry` type."""
type JournalEntryAgg {
  id: IntAgg
  text: StringAgg
}

input JournalEntryCreationInput {
  text: String!
}

"""
Predicate for the `JournalEntry` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input JournalEntryFilter {
  id: IntFilter
  text: StringFilter
  and: [JournalEntryFilter!]
  or: [JournalEntryFilter!]
  not: JournalEntryFilter
}

input JournalEntryOrdering {
  id: Ordering
  text: Ordering
}

input JournalEntryUpdateInput {
  id: Int
  text: String
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  getCookie: Boolean!
  getDevModeEnabled: Boolean!
  getIp: String!
  getRole: String!
  getRoleAndUid: String!
  getSecretHeader: String!
  isTrackingEnabled: Boolean!

  """
  Get multiple `JournalEntry`s given the provided `where` filter, order by, limit, and offset
  """
  journalEntries(where: JournalEntryFilter, orderBy: [JournalEntryOrdering!], limit: Int, offset: Int): [JournalEntry!]!

  """
  Get the aggregate value of the selected fields over all `JournalEntry`s given the provided `where` filter
  """
  journalEntriesAgg(where: JournalEntryFilter): JournalEntryAgg!

  """Get a single `JournalEntry` given primary key fields"""
  journalEntry(id: Int!): JournalEntry
  shouldTrack: Boolean!
}

type Mutation {
  """
  Create multiple JournalEntrys. Check the `JournalEntryCreationInput` type for the expected shape of the data.
  """
  createJournalEntries(data: [JournalEntryCreationInput!]!): [JournalEntry!]!

  """
  Create a new JournalEntry. Check the `JournalEntryCreationInput` type for the expected shape of the data.
  """
  createJournalEntry(data: JournalEntryCreationInput!): JournalEntry!

  """Delete multiple JournalEntrys matching the provided `where` filter."""
  deleteJournalEntries(where: JournalEntryFilter): [JournalEntry!]!

  """Delete the JournalEntry with the provided primary key."""
  deleteJournalEntry(id: Int!): JournalEntry

  """
  Update multiple JournalEntrys matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateJournalEntries(where: JournalEntryFilter, data: JournalEntryUpdateInput!): [JournalEntry!]!

  """
  Update the JournalEntry with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateJournalEntry(id: Int!, data: JournalEntryUpdateInput!): JournalEntry
}