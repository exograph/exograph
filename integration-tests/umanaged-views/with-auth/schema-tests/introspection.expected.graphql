type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Product {
  id: Int!
  name: String!
  salePrice: Int!
  purchasePrice: Int!
}

type ProductAgg {
  id: IntAgg
  name: StringAgg
  salePrice: IntAgg
  purchasePrice: IntAgg
}

input ProductCreationInput {
  name: String!
  salePrice: Int!
  purchasePrice: Int!
}

input ProductFilter {
  id: IntFilter
  name: StringFilter
  salePrice: IntFilter
  purchasePrice: IntFilter
  and: [ProductFilter!]
  or: [ProductFilter!]
  not: ProductFilter
}

input ProductOrdering {
  id: Ordering
  name: Ordering
  salePrice: Ordering
  purchasePrice: Ordering
}

type ProductProfit {
  id: Int!
  name: String!
  salePrice: Int!
  purchasePrice: Int!
  profit: Int!
}

type ProductProfitAgg {
  id: IntAgg
  name: StringAgg
  salePrice: IntAgg
  purchasePrice: IntAgg
  profit: IntAgg
}

input ProductProfitCreationInput {
  name: String!
  salePrice: Int!
  purchasePrice: Int!
}

input ProductProfitFilter {
  id: IntFilter
  name: StringFilter
  salePrice: IntFilter
  purchasePrice: IntFilter
  profit: IntFilter
  and: [ProductProfitFilter!]
  or: [ProductProfitFilter!]
  not: ProductProfitFilter
}

input ProductProfitOrdering {
  id: Ordering
  name: Ordering
  salePrice: Ordering
  purchasePrice: Ordering
  profit: Ordering
}

input ProductProfitUpdateInput {
  id: Int
  name: String
  salePrice: Int
  purchasePrice: Int
}

input ProductUpdateInput {
  id: Int
  name: String
  salePrice: Int
  purchasePrice: Int
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  product(id: Int!): Product
  productProfit(id: Int!): ProductProfit
  productProfits(where: ProductProfitFilter, orderBy: [ProductProfitOrdering!], limit: Int, offset: Int): [ProductProfit!]!
  productProfitsAgg(where: ProductProfitFilter): ProductProfitAgg!
  products(where: ProductFilter, orderBy: [ProductOrdering!], limit: Int, offset: Int): [Product!]!
  productsAgg(where: ProductFilter): ProductAgg!
}

type Mutation {
  createProduct(data: ProductCreationInput!): Product!
  createProductProfit(data: ProductProfitCreationInput!): ProductProfit!
  createProductProfits(data: [ProductProfitCreationInput!]!): [ProductProfit!]!
  createProducts(data: [ProductCreationInput!]!): [Product!]!
  deleteProduct(id: Int!): Product
  deleteProductProfit(id: Int!): ProductProfit
  deleteProductProfits(where: ProductProfitFilter): [ProductProfit!]!
  deleteProducts(where: ProductFilter): [Product!]!
  updateProduct(id: Int!, data: ProductUpdateInput!): Product
  updateProductProfit(id: Int!, data: ProductProfitUpdateInput!): ProductProfit
  updateProductProfits(where: ProductProfitFilter, data: ProductProfitUpdateInput!): [ProductProfit!]!
  updateProducts(where: ProductFilter, data: ProductUpdateInput!): [Product!]!
}