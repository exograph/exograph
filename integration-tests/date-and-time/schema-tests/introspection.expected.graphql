type Book {
  id: Int!
  name: String!
  published_on: LocalDate!
  modified_time: Instant!
  modified_time_stripped: LocalDateTime!
  reading_club_time: LocalTime!
}

"""An aggregate for the `Book` type."""
type BookAgg {
  id: IntAgg
  name: StringAgg
  published_on: LocalDateAgg
  modified_time: InstantAgg
  modified_time_stripped: LocalDateTimeAgg
  reading_club_time: LocalTimeAgg
}

input BookCreationInput {
  name: String!
  published_on: LocalDate!
  modified_time: Instant!
  modified_time_stripped: LocalDateTime!
  reading_club_time: LocalTime!
}

"""
Predicate for the `Book` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input BookFilter {
  id: IntFilter
  name: StringFilter
  published_on: LocalDateFilter
  modified_time: InstantFilter
  modified_time_stripped: LocalDateTimeFilter
  reading_club_time: LocalTimeFilter
  and: [BookFilter!]
  or: [BookFilter!]
  not: BookFilter
}

input BookOrdering {
  id: Ordering
  name: Ordering
  published_on: Ordering
  modified_time: Ordering
  modified_time_stripped: Ordering
  reading_club_time: Ordering
}

input BookUpdateInput {
  id: Int
  name: String
  published_on: LocalDate
  modified_time: Instant
  modified_time_stripped: LocalDateTime
  reading_club_time: LocalTime
}

scalar Instant

type InstantAgg {
  count: Int
}

input InstantFilter {
  eq: Instant
  neq: Instant
  lt: Instant
  lte: Instant
  gt: Instant
  gte: Instant
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

scalar LocalDate

type LocalDateAgg {
  count: Int
}

input LocalDateFilter {
  eq: LocalDate
  neq: LocalDate
  lt: LocalDate
  lte: LocalDate
  gt: LocalDate
  gte: LocalDate
}

scalar LocalDateTime

type LocalDateTimeAgg {
  count: Int
}

input LocalDateTimeFilter {
  eq: LocalDateTime
  neq: LocalDateTime
  lt: LocalDateTime
  lte: LocalDateTime
  gt: LocalDateTime
  gte: LocalDateTime
}

scalar LocalTime

type LocalTimeAgg {
  count: Int
}

input LocalTimeFilter {
  eq: LocalTime
  neq: LocalTime
  lt: LocalTime
  lte: LocalTime
  gt: LocalTime
  gte: LocalTime
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Book` given primary key fields"""
  book(id: Int!): Book

  """
  Get multiple `Book`s given the provided `where` filter, order by, limit, and offset
  """
  books(where: BookFilter, orderBy: [BookOrdering!], limit: Int, offset: Int): [Book!]!

  """
  Get the aggregate value of the selected fields over all `Book`s given the provided `where` filter
  """
  booksAgg(where: BookFilter): BookAgg!
}

type Mutation {
  """
  Create a new Book. Check the `BookCreationInput` type for the expected shape of the data.
  """
  createBook(data: BookCreationInput!): Book!

  """
  Create multiple Books. Check the `BookCreationInput` type for the expected shape of the data.
  """
  createBooks(data: [BookCreationInput!]!): [Book!]!

  """Delete the Book with the provided primary key."""
  deleteBook(id: Int!): Book

  """Delete multiple Books matching the provided `where` filter."""
  deleteBooks(where: BookFilter): [Book!]!

  """
  Update the Book with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateBook(id: Int!, data: BookUpdateInput!): Book

  """
  Update multiple Books matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateBooks(where: BookFilter, data: BookUpdateInput!): [Book!]!
}