context AuthContext {
  @jwt("sub") id: Int 
  @jwt("roles") roles: Array<String> 
}

@postgres
module DocumentModule {
  @access(query="ADMIN" in AuthContext.roles || self.public, mutation="ADMIN" in AuthContext.roles)
  type Doc {
    @pk id: Int = autoIncrement()
    content: String
    public: Boolean
  }
  
  // Only admins can do anything with this model
  @access("ADMIN" in AuthContext.roles) 
  type AdminDoc {
    @pk id: Int = autoIncrement()
    content: String
  }
  
  // An example of nested access control (users can see there own membership)
  @access(query="ADMIN" in AuthContext.roles || self.user.id == AuthContext.id, mutation="ADMIN" in AuthContext.roles)
  type Membership {
    @pk id: Int = autoIncrement()
    kind: String
    user: User
  }
  
  @access("ADMIN" in AuthContext.roles)
  type User {
    @pk id: Int = autoIncrement()
    name: String
    membership: Membership?
    notes: Set<AdminNote>?
  }

  // Only admins can see their own notes (or all notes if they are super admin)
  @access("SUPER_ADMIN" in AuthContext.roles || ("ADMIN" in AuthContext.roles && self.user.id == AuthContext.id))
  type AdminNote {
    @pk id: Int = autoIncrement()
    content: String
    user: User
  }
}