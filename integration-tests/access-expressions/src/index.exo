context AuthContext {
  @jwt("sub") id: Int?
  @jwt("roles") roles: Array<String> 
  @jwt("externalId") externalId: Int
}

@postgres
module DocumentModule {
  @access(query="ADMIN" in AuthContext.roles || self.public, mutation="ADMIN" in AuthContext.roles)
  type Doc {
    @pk id: Int = autoIncrement()
    content: String
    public: Boolean
  }
  
  // Only admins can do anything with this model
  @access("ADMIN" in AuthContext.roles) 
  type AdminDoc {
    @pk id: Int = autoIncrement()
    content: String
  }
  
  // An example of nested access control (users can see there own membership)
  @access(query="ADMIN" in AuthContext.roles || self.user.id == AuthContext.id, mutation="ADMIN" in AuthContext.roles)
  type Membership {
    @pk id: Int = autoIncrement()
    kind: String
    user: User
  }
  
  @access("ADMIN" in AuthContext.roles)
  type User {
    @pk id: Int = autoIncrement()
    name: String
    membership: Membership?
    notes: Set<AdminNote>?
  }

  // Only admins can see their own notes (or all notes if they are super admin)
  @access("SUPER_ADMIN" in AuthContext.roles || ("ADMIN" in AuthContext.roles && self.user.id == AuthContext.id))
  type AdminNote {
    @pk id: Int = autoIncrement()
    content: String
    user: User
  }

  // To set up a scenario where access control uses an optional field (and compares to a non-optional context field)
  @access(self.externalId == AuthContext.externalId || "ADMIN" in AuthContext.roles)
  type ExternalDoc {
    @pk id: Int = autoIncrement()
    externalId: Int?
    content: String
  }

  // Only authenticated users can see the docs
  @access(query=AuthContext.id != null || "ADMIN" in AuthContext.roles, mutation="ADMIN" in AuthContext.roles)
  type AuthenticatedDoc {
    @pk id: Int = autoIncrement()
    content: String
  }

  // Only un-authenticated users can see the docs (this is a contrived example)
  @access(query=AuthContext.id == null || "ADMIN" in AuthContext.roles, mutation="ADMIN" in AuthContext.roles)
  type UnauthenticatedDoc {
    @pk id: Int = autoIncrement()
    content: String
  }
}

@deno("access-expressions.ts")
module AccessExpressions {
  @access(AuthContext.id != null)
  query getAuthenticatedSecret(): String

  @access(AuthContext.id != null)
  mutation setAuthenticatedSecret(secret: String): String

  // This is a contrived example, but it shows `== null` in the access expression
  @access(AuthContext.id == null)
  query getUnauthenticatedSecret(): String

  @access(AuthContext.id == null)
  mutation setUnauthenticatedSecret(secret: String): String
}