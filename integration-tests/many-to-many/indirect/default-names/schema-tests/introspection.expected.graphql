type Artist {
  id: Int!
  name: String!
  concertArtists(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]
  concertArtistsAgg(where: ConcertArtistFilter): ConcertArtistAgg
}

type ArtistAgg {
  id: IntAgg
  name: StringAgg
}

input ArtistCreationInput {
  name: String!
  concertArtists: [ConcertArtistCreationInputFromArtist!]
}

input ArtistFilter {
  id: IntFilter
  name: StringFilter
  concertArtists: ConcertArtistFilter
  and: [ArtistFilter!]
  or: [ArtistFilter!]
  not: ArtistFilter
}

input ArtistOrdering {
  id: Ordering
  name: Ordering
}

input ArtistReferenceInput {
  id: Int!
}

input ArtistUpdateInput {
  id: Int
  name: String
  concertArtists: ConcertArtistUpdateInputFromArtist
}

type Concert {
  id: Int!
  title: String!
  concertArtists(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]!
  notifications(where: NotificationFilter, orderBy: [NotificationOrdering!], limit: Int, offset: Int): [Notification!]
  concertArtistsAgg(where: ConcertArtistFilter): ConcertArtistAgg
  notificationsAgg(where: NotificationFilter): NotificationAgg
}

type ConcertAgg {
  id: IntAgg
  title: StringAgg
}

type ConcertArtist {
  id: Int!
  concert: Concert!
  artist: Artist!
  rank: Int!
  role: String!
}

type ConcertArtistAgg {
  id: IntAgg
  rank: IntAgg
  role: StringAgg
}

input ConcertArtistCreationInput {
  concert: ConcertReferenceInput!
  artist: ArtistReferenceInput!
  rank: Int!
  role: String!
}

input ConcertArtistCreationInputFromArtist {
  concert: ConcertReferenceInput!
  rank: Int!
  role: String!
}

input ConcertArtistCreationInputFromConcert {
  artist: ArtistReferenceInput!
  rank: Int!
  role: String!
}

input ConcertArtistFilter {
  id: IntFilter
  concert: ConcertFilter
  artist: ArtistFilter
  rank: IntFilter
  role: StringFilter
  and: [ConcertArtistFilter!]
  or: [ConcertArtistFilter!]
  not: ConcertArtistFilter
}

input ConcertArtistOrdering {
  id: Ordering
  concert: [ConcertOrdering!]
  artist: [ArtistOrdering!]
  rank: Ordering
  role: Ordering
}

input ConcertArtistReferenceInput {
  id: Int!
}

input ConcertArtistUpdateInput {
  id: Int
  concert: ConcertReferenceInput
  artist: ArtistReferenceInput
  rank: Int
  role: String
}

input ConcertArtistUpdateInputFromArtist {
  create: [ConcertArtistCreationInputFromArtist!]
  update: [ConcertArtistUpdateInputFromArtistNested!]
  delete: [ConcertArtistReferenceInput!]
}

input ConcertArtistUpdateInputFromArtistNested {
  id: Int!
  concert: ConcertReferenceInput
  rank: Int
  role: String
}

input ConcertArtistUpdateInputFromConcert {
  create: [ConcertArtistCreationInputFromConcert!]
  update: [ConcertArtistUpdateInputFromConcertNested!]
  delete: [ConcertArtistReferenceInput!]
}

input ConcertArtistUpdateInputFromConcertNested {
  id: Int!
  artist: ArtistReferenceInput
  rank: Int
  role: String
}

input ConcertCreationInput {
  title: String!
  concertArtists: [ConcertArtistCreationInputFromConcert!]!
  notifications: [NotificationCreationInputFromConcert!]
}

input ConcertFilter {
  id: IntFilter
  title: StringFilter
  concertArtists: ConcertArtistFilter
  notifications: NotificationFilter
  and: [ConcertFilter!]
  or: [ConcertFilter!]
  not: ConcertFilter
}

input ConcertOrdering {
  id: Ordering
  title: Ordering
}

input ConcertReferenceInput {
  id: Int!
}

input ConcertUpdateInput {
  id: Int
  title: String
  concertArtists: ConcertArtistUpdateInputFromConcert
  notifications: NotificationUpdateInputFromConcert
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Notification {
  id: Int!
  concert: Concert
  title: String!
  message: String!
}

type NotificationAgg {
  id: IntAgg
  title: StringAgg
  message: StringAgg
}

input NotificationCreationInput {
  concert: ConcertReferenceInput
  title: String!
  message: String!
}

input NotificationCreationInputFromConcert {
  title: String!
  message: String!
}

input NotificationFilter {
  id: IntFilter
  concert: ConcertFilter
  title: StringFilter
  message: StringFilter
  and: [NotificationFilter!]
  or: [NotificationFilter!]
  not: NotificationFilter
}

input NotificationOrdering {
  id: Ordering
  concert: [ConcertOrdering!]
  title: Ordering
  message: Ordering
}

input NotificationReferenceInput {
  id: Int!
}

input NotificationUpdateInput {
  id: Int
  concert: ConcertReferenceInput
  title: String
  message: String
}

input NotificationUpdateInputFromConcert {
  create: [NotificationCreationInputFromConcert!]
  update: [NotificationUpdateInputFromConcertNested!]
  delete: [NotificationReferenceInput!]
}

input NotificationUpdateInputFromConcertNested {
  id: Int!
  title: String
  message: String
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  artist(id: Int!): Artist
  artists(where: ArtistFilter, orderBy: [ArtistOrdering!], limit: Int, offset: Int): [Artist!]!
  artistsAgg(where: ArtistFilter): ArtistAgg!
  concert(id: Int!): Concert
  concertArtist(id: Int!): ConcertArtist
  concertArtists(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]!
  concertArtistsAgg(where: ConcertArtistFilter): ConcertArtistAgg!
  concerts(where: ConcertFilter, orderBy: [ConcertOrdering!], limit: Int, offset: Int): [Concert!]!
  concertsAgg(where: ConcertFilter): ConcertAgg!
  notification(id: Int!): Notification
  notifications(where: NotificationFilter, orderBy: [NotificationOrdering!], limit: Int, offset: Int): [Notification!]!
  notificationsAgg(where: NotificationFilter): NotificationAgg!
}

type Mutation {
  createArtist(data: ArtistCreationInput!): Artist!
  createArtists(data: [ArtistCreationInput!]!): [Artist!]!
  createConcert(data: ConcertCreationInput!): Concert!
  createConcertArtist(data: ConcertArtistCreationInput!): ConcertArtist!
  createConcertArtists(data: [ConcertArtistCreationInput!]!): [ConcertArtist!]!
  createConcerts(data: [ConcertCreationInput!]!): [Concert!]!
  createNotification(data: NotificationCreationInput!): Notification!
  createNotifications(data: [NotificationCreationInput!]!): [Notification!]!
  deleteArtist(id: Int!): Artist
  deleteArtists(where: ArtistFilter): [Artist!]!
  deleteConcert(id: Int!): Concert
  deleteConcertArtist(id: Int!): ConcertArtist
  deleteConcertArtists(where: ConcertArtistFilter): [ConcertArtist!]!
  deleteConcerts(where: ConcertFilter): [Concert!]!
  deleteNotification(id: Int!): Notification
  deleteNotifications(where: NotificationFilter): [Notification!]!
  updateArtist(id: Int!, data: ArtistUpdateInput!): Artist
  updateArtists(where: ArtistFilter, data: ArtistUpdateInput!): [Artist!]!
  updateConcert(id: Int!, data: ConcertUpdateInput!): Concert
  updateConcertArtist(id: Int!, data: ConcertArtistUpdateInput!): ConcertArtist
  updateConcertArtists(where: ConcertArtistFilter, data: ConcertArtistUpdateInput!): [ConcertArtist!]!
  updateConcerts(where: ConcertFilter, data: ConcertUpdateInput!): [Concert!]!
  updateNotification(id: Int!, data: NotificationUpdateInput!): Notification
  updateNotifications(where: NotificationFilter, data: NotificationUpdateInput!): [Notification!]!
}