type Artist {
  id: Int!
  name: String!
  aristsConcerts(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]
  aristsConcertsAgg(where: ConcertArtistFilter): ConcertArtistAgg
}

"""An aggregate for the `Artist` type."""
type ArtistAgg {
  id: IntAgg
  name: StringAgg
}

input ArtistCreationInput {
  name: String!
  aristsConcerts: [ConcertArtistCreationInputFromArtist!]
}

"""
Predicate for the `Artist` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ArtistFilter {
  id: IntFilter
  name: StringFilter
  aristsConcerts: ConcertArtistFilter
  and: [ArtistFilter!]
  or: [ArtistFilter!]
  not: ArtistFilter
}

input ArtistOrdering {
  id: Ordering
  name: Ordering
}

input ArtistReferenceInput {
  id: Int!
}

input ArtistUpdateInput {
  id: Int
  name: String
  aristsConcerts: ConcertArtistUpdateInputFromArtist
}

type Concert {
  id: Int!
  title: String!
  concertArtists(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]!
  venue: Venue
  concertArtistsAgg(where: ConcertArtistFilter): ConcertArtistAgg
}

"""An aggregate for the `Concert` type."""
type ConcertAgg {
  id: IntAgg
  title: StringAgg
}

type ConcertArtist {
  id: Int!
  concert: Concert!
  artist: Artist!
  rank: Int!
  role: String!
}

"""An aggregate for the `ConcertArtist` type."""
type ConcertArtistAgg {
  id: IntAgg
  rank: IntAgg
  role: StringAgg
}

input ConcertArtistCreationInput {
  concert: ConcertReferenceInput!
  artist: ArtistReferenceInput!
  rank: Int
  role: String!
}

input ConcertArtistCreationInputFromArtist {
  concert: ConcertReferenceInput!
  rank: Int
  role: String!
}

input ConcertArtistCreationInputFromConcert {
  artist: ArtistReferenceInput!
  rank: Int
  role: String!
}

"""
Predicate for the `ConcertArtist` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ConcertArtistFilter {
  id: IntFilter
  concert: ConcertFilter
  artist: ArtistFilter
  rank: IntFilter
  role: StringFilter
  and: [ConcertArtistFilter!]
  or: [ConcertArtistFilter!]
  not: ConcertArtistFilter
}

input ConcertArtistOrdering {
  id: Ordering
  concert: [ConcertOrdering!]
  artist: [ArtistOrdering!]
  rank: Ordering
  role: Ordering
}

input ConcertArtistReferenceInput {
  id: Int!
}

input ConcertArtistUpdateInput {
  id: Int
  concert: ConcertReferenceInput
  artist: ArtistReferenceInput
  rank: Int
  role: String
}

input ConcertArtistUpdateInputFromArtist {
  create: [ConcertArtistCreationInputFromArtist!]
  update: [ConcertArtistUpdateInputFromArtistNested!]
  delete: [ConcertArtistReferenceInput!]
}

input ConcertArtistUpdateInputFromArtistNested {
  id: Int!
  concert: ConcertReferenceInput
  rank: Int
  role: String
}

input ConcertArtistUpdateInputFromConcert {
  create: [ConcertArtistCreationInputFromConcert!]
  update: [ConcertArtistUpdateInputFromConcertNested!]
  delete: [ConcertArtistReferenceInput!]
}

input ConcertArtistUpdateInputFromConcertNested {
  id: Int!
  artist: ArtistReferenceInput
  rank: Int
  role: String
}

input ConcertCreationInput {
  title: String!
  concertArtists: [ConcertArtistCreationInputFromConcert!]!
  venue: VenueReferenceInput
}

input ConcertCreationInputFromVenue {
  title: String!
  concertArtists: [ConcertArtistCreationInputFromConcert!]!
}

"""
Predicate for the `Concert` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ConcertFilter {
  id: IntFilter
  title: StringFilter
  concertArtists: ConcertArtistFilter
  venue: VenueFilter
  and: [ConcertFilter!]
  or: [ConcertFilter!]
  not: ConcertFilter
}

input ConcertOrdering {
  id: Ordering
  title: Ordering
  venue: [VenueOrdering!]
}

input ConcertReferenceInput {
  id: Int!
}

input ConcertUpdateInput {
  id: Int
  title: String
  concertArtists: ConcertArtistUpdateInputFromConcert
  venue: VenueReferenceInput
}

input ConcertUpdateInputFromVenue {
  create: [ConcertCreationInputFromVenue!]
  update: [ConcertUpdateInputFromVenueNested!]
  delete: [ConcertReferenceInput!]
}

input ConcertUpdateInputFromVenueNested {
  id: Int!
  title: String
  concertArtists: ConcertArtistUpdateInputFromConcert
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Venue {
  id: Int!
  concerts(where: ConcertFilter, orderBy: [ConcertOrdering!], limit: Int, offset: Int): [Concert!]
  concertsAgg(where: ConcertFilter): ConcertAgg
}

"""An aggregate for the `Venue` type."""
type VenueAgg {
  id: IntAgg
}

input VenueCreationInput {
  concerts: [ConcertCreationInputFromVenue!]
}

"""
Predicate for the `Venue` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input VenueFilter {
  id: IntFilter
  concerts: ConcertFilter
  and: [VenueFilter!]
  or: [VenueFilter!]
  not: VenueFilter
}

input VenueOrdering {
  id: Ordering
}

input VenueReferenceInput {
  id: Int!
}

input VenueUpdateInput {
  id: Int
  concerts: ConcertUpdateInputFromVenue
}

type Query {
  """Get a single `Artist` given primary key fields"""
  artist(id: Int!): Artist

  """
  Get multiple `Artist`s given the provided `where` filter, order by, limit, and offset
  """
  artists(where: ArtistFilter, orderBy: [ArtistOrdering!], limit: Int, offset: Int): [Artist!]!

  """
  Get the aggregate value of the selected fields over all `Artist`s given the provided `where` filter
  """
  artistsAgg(where: ArtistFilter): ArtistAgg!

  """Get a single `Concert` given primary key fields"""
  concert(id: Int!): Concert

  """Get a single `ConcertArtist` given primary key fields"""
  concertArtist(id: Int!): ConcertArtist

  """
  Get multiple `ConcertArtist`s given the provided `where` filter, order by, limit, and offset
  """
  concertArtists(where: ConcertArtistFilter, orderBy: [ConcertArtistOrdering!], limit: Int, offset: Int): [ConcertArtist!]!

  """
  Get the aggregate value of the selected fields over all `ConcertArtist`s given the provided `where` filter
  """
  concertArtistsAgg(where: ConcertArtistFilter): ConcertArtistAgg!

  """
  Get multiple `Concert`s given the provided `where` filter, order by, limit, and offset
  """
  concerts(where: ConcertFilter, orderBy: [ConcertOrdering!], limit: Int, offset: Int): [Concert!]!

  """
  Get the aggregate value of the selected fields over all `Concert`s given the provided `where` filter
  """
  concertsAgg(where: ConcertFilter): ConcertAgg!

  """Get a single `Venue` given primary key fields"""
  venue(id: Int!): Venue

  """
  Get multiple `Venue`s given the provided `where` filter, order by, limit, and offset
  """
  venues(where: VenueFilter, orderBy: [VenueOrdering!], limit: Int, offset: Int): [Venue!]!

  """
  Get the aggregate value of the selected fields over all `Venue`s given the provided `where` filter
  """
  venuesAgg(where: VenueFilter): VenueAgg!
}

type Mutation {
  """
  Create a new Artist. Check the `ArtistCreationInput` type for the expected shape of the data.
  """
  createArtist(data: ArtistCreationInput!): Artist!

  """
  Create multiple Artists. Check the `ArtistCreationInput` type for the expected shape of the data.
  """
  createArtists(data: [ArtistCreationInput!]!): [Artist!]!

  """
  Create a new Concert. Check the `ConcertCreationInput` type for the expected shape of the data.
  """
  createConcert(data: ConcertCreationInput!): Concert!

  """
  Create a new ConcertArtist. Check the `ConcertArtistCreationInput` type for the expected shape of the data.
  """
  createConcertArtist(data: ConcertArtistCreationInput!): ConcertArtist!

  """
  Create multiple ConcertArtists. Check the `ConcertArtistCreationInput` type for the expected shape of the data.
  """
  createConcertArtists(data: [ConcertArtistCreationInput!]!): [ConcertArtist!]!

  """
  Create multiple Concerts. Check the `ConcertCreationInput` type for the expected shape of the data.
  """
  createConcerts(data: [ConcertCreationInput!]!): [Concert!]!

  """
  Create a new Venue. Check the `VenueCreationInput` type for the expected shape of the data.
  """
  createVenue(data: VenueCreationInput!): Venue!

  """
  Create multiple Venues. Check the `VenueCreationInput` type for the expected shape of the data.
  """
  createVenues(data: [VenueCreationInput!]!): [Venue!]!

  """Delete the Artist with the provided primary key."""
  deleteArtist(id: Int!): Artist

  """Delete multiple Artists matching the provided `where` filter."""
  deleteArtists(where: ArtistFilter): [Artist!]!

  """Delete the Concert with the provided primary key."""
  deleteConcert(id: Int!): Concert

  """Delete the ConcertArtist with the provided primary key."""
  deleteConcertArtist(id: Int!): ConcertArtist

  """Delete multiple ConcertArtists matching the provided `where` filter."""
  deleteConcertArtists(where: ConcertArtistFilter): [ConcertArtist!]!

  """Delete multiple Concerts matching the provided `where` filter."""
  deleteConcerts(where: ConcertFilter): [Concert!]!

  """Delete the Venue with the provided primary key."""
  deleteVenue(id: Int!): Venue

  """Delete multiple Venues matching the provided `where` filter."""
  deleteVenues(where: VenueFilter): [Venue!]!

  """
  Update the Artist with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateArtist(id: Int!, data: ArtistUpdateInput!): Artist

  """
  Update multiple Artists matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateArtists(where: ArtistFilter, data: ArtistUpdateInput!): [Artist!]!

  """
  Update the Concert with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateConcert(id: Int!, data: ConcertUpdateInput!): Concert

  """
  Update the ConcertArtist with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateConcertArtist(id: Int!, data: ConcertArtistUpdateInput!): ConcertArtist

  """
  Update multiple ConcertArtists matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateConcertArtists(where: ConcertArtistFilter, data: ConcertArtistUpdateInput!): [ConcertArtist!]!

  """
  Update multiple Concerts matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateConcerts(where: ConcertFilter, data: ConcertUpdateInput!): [Concert!]!

  """
  Update the Venue with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateVenue(id: Int!, data: VenueUpdateInput!): Venue

  """
  Update multiple Venues matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateVenues(where: VenueFilter, data: VenueUpdateInput!): [Venue!]!
}