type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Rsvp {
  id: Int!
  email: String!
  count: Int!
}

"""An aggregate for the `Rsvp` type."""
type RsvpAgg {
  id: IntAgg
  email: StringAgg
  count: IntAgg
}

type RsvpConfirmation {
  email: String!
  count: Int!
}

input RsvpCreationInput {
  email: String!
  count: Int!
}

"""
Predicate for the `Rsvp` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input RsvpFilter {
  id: IntFilter
  email: StringFilter
  count: IntFilter
  and: [RsvpFilter!]
  or: [RsvpFilter!]
  not: RsvpFilter
}

input RsvpOrdering {
  id: Ordering
  email: Ordering
  count: Ordering
}

input RsvpUpdateInput {
  id: Int
  email: String
  count: Int
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Rsvp` given primary key fields"""
  rsvp(id: Int!): Rsvp

  """
  Get multiple `Rsvp`s given the provided `where` filter, order by, limit, and offset
  """
  rsvps(where: RsvpFilter, orderBy: [RsvpOrdering!], limit: Int, offset: Int): [Rsvp!]!

  """
  Get the aggregate value of the selected fields over all `Rsvp`s given the provided `where` filter
  """
  rsvpsAgg(where: RsvpFilter): RsvpAgg!
}

type Mutation {
  """
  Create a new Rsvp. Check the `RsvpCreationInput` type for the expected shape of the data.
  """
  createRsvp(data: RsvpCreationInput!): Rsvp!

  """
  Create multiple Rsvps. Check the `RsvpCreationInput` type for the expected shape of the data.
  """
  createRsvps(data: [RsvpCreationInput!]!): [Rsvp!]!

  """Delete the Rsvp with the provided primary key."""
  deleteRsvp(id: Int!): Rsvp

  """Delete multiple Rsvps matching the provided `where` filter."""
  deleteRsvps(where: RsvpFilter): [Rsvp!]!
  processRsvp(email: String!, count: Int!): RsvpConfirmation!

  """
  Update the Rsvp with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateRsvp(id: Int!, data: RsvpUpdateInput!): Rsvp

  """
  Update multiple Rsvps matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateRsvps(where: RsvpFilter, data: RsvpUpdateInput!): [Rsvp!]!
}