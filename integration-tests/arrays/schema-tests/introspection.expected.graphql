type ChessPiece {
  id: Int!
  name: String!
  position_history: [String!]!
  neighbor_info: [[String!]!]!
}

"""An aggregate for the `ChessPiece` type."""
type ChessPieceAgg {
  id: IntAgg
  name: StringAgg
  position_history: StringAgg
  neighbor_info: StringAgg
}

input ChessPieceCreationInput {
  name: String!
  position_history: [String!]!
  neighbor_info: [[String!]!]!
}

"""
Predicate for the `ChessPiece` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ChessPieceFilter {
  id: IntFilter
  name: StringFilter
  position_history: StringFilter
  neighbor_info: StringFilter
  and: [ChessPieceFilter!]
  or: [ChessPieceFilter!]
  not: ChessPieceFilter
}

input ChessPieceOrdering {
  id: Ordering
  name: Ordering
}

input ChessPieceUpdateInput {
  id: Int
  name: String
  position_history: [String!]
  neighbor_info: [[String!]!]
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `ChessPiece` given primary key fields"""
  chessPiece(id: Int!): ChessPiece

  """
  Get multiple `ChessPiece`s given the provided `where` filter, order by, limit, and offset
  """
  chessPieces(where: ChessPieceFilter, orderBy: [ChessPieceOrdering!], limit: Int, offset: Int): [ChessPiece!]!

  """
  Get the aggregate value of the selected fields over all `ChessPiece`s given the provided `where` filter
  """
  chessPiecesAgg(where: ChessPieceFilter): ChessPieceAgg!
}

type Mutation {
  """
  Create a new ChessPiece. Check the `ChessPieceCreationInput` type for the expected shape of the data.
  """
  createChessPiece(data: ChessPieceCreationInput!): ChessPiece!

  """
  Create multiple ChessPieces. Check the `ChessPieceCreationInput` type for the expected shape of the data.
  """
  createChessPieces(data: [ChessPieceCreationInput!]!): [ChessPiece!]!

  """Delete the ChessPiece with the provided primary key."""
  deleteChessPiece(id: Int!): ChessPiece

  """Delete multiple ChessPieces matching the provided `where` filter."""
  deleteChessPieces(where: ChessPieceFilter): [ChessPiece!]!

  """
  Update the ChessPiece with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateChessPiece(id: Int!, data: ChessPieceUpdateInput!): ChessPiece

  """
  Update multiple ChessPieces matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateChessPieces(where: ChessPieceFilter, data: ChessPieceUpdateInput!): [ChessPiece!]!
}