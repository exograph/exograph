scalar Decimal

type DecimalAgg {
  min: Decimal
  max: Decimal
  sum: Decimal
  avg: Decimal
  count: Int
}

input DecimalFilter {
  eq: Decimal
  neq: Decimal
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
}

type Foo {
  id: Int!
  verylong: Decimal!
}

"""An aggregate for the `Foo` type."""
type FooAgg {
  id: IntAgg
  verylong: DecimalAgg
}

input FooCreationInput {
  verylong: Decimal!
}

"""
Predicate for the `Foo` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input FooFilter {
  id: IntFilter
  verylong: DecimalFilter
  and: [FooFilter!]
  or: [FooFilter!]
  not: FooFilter
}

input FooOrdering {
  id: Ordering
  verylong: Ordering
}

input FooUpdateInput {
  id: Int
  verylong: Decimal
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Query {
  """Get a single `Foo` given primary key fields"""
  foo(id: Int!): Foo

  """
  Get multiple `Foo`s given the provided `where` filter, order by, limit, and offset
  """
  foos(where: FooFilter, orderBy: [FooOrdering!], limit: Int, offset: Int): [Foo!]!

  """
  Get the aggregate value of the selected fields over all `Foo`s given the provided `where` filter
  """
  foosAgg(where: FooFilter): FooAgg!
}

type Mutation {
  """
  Create a new Foo. Check the `FooCreationInput` type for the expected shape of the data.
  """
  createFoo(data: FooCreationInput!): Foo!

  """
  Create multiple Foos. Check the `FooCreationInput` type for the expected shape of the data.
  """
  createFoos(data: [FooCreationInput!]!): [Foo!]!

  """Delete the Foo with the provided primary key."""
  deleteFoo(id: Int!): Foo

  """Delete multiple Foos matching the provided `where` filter."""
  deleteFoos(where: FooFilter): [Foo!]!

  """
  Update the Foo with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateFoo(id: Int!, data: FooUpdateInput!): Foo

  """
  Update multiple Foos matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateFoos(where: FooFilter, data: FooUpdateInput!): [Foo!]!
}