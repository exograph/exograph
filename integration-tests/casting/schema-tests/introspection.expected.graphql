type FloatAgg {
  min: Float
  max: Float
  sum: Float
  avg: Float
  count: Int
}

input FloatFilter {
  eq: Float
  neq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Number {
  id: Int!
  int16: Int
  int32: Int
  singlePrecision: Float
}

"""An aggregate for the `Number` type."""
type NumberAgg {
  id: IntAgg
  int16: IntAgg
  int32: IntAgg
  singlePrecision: FloatAgg
}

input NumberCreationInput {
  int16: Int
  int32: Int
  singlePrecision: Float
}

"""
Predicate for the `Number` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input NumberFilter {
  id: IntFilter
  int16: IntFilter
  int32: IntFilter
  singlePrecision: FloatFilter
  and: [NumberFilter!]
  or: [NumberFilter!]
  not: NumberFilter
}

input NumberOrdering {
  id: Ordering
  int16: Ordering
  int32: Ordering
  singlePrecision: Ordering
}

input NumberUpdateInput {
  id: Int
  int16: Int
  int32: Int
  singlePrecision: Float
}

enum Ordering {
  ASC
  DESC
}

type Query {
  """Get a single `Number` given primary key fields"""
  number(id: Int!): Number

  """
  Get multiple `Number`s given the provided `where` filter, order by, limit, and offset
  """
  numbers(where: NumberFilter, orderBy: [NumberOrdering!], limit: Int, offset: Int): [Number!]!

  """
  Get the aggregate value of the selected fields over all `Number`s given the provided `where` filter
  """
  numbersAgg(where: NumberFilter): NumberAgg!
}

type Mutation {
  """
  Create a new Number. Check the `NumberCreationInput` type for the expected shape of the data.
  """
  createNumber(data: NumberCreationInput!): Number!

  """
  Create multiple Numbers. Check the `NumberCreationInput` type for the expected shape of the data.
  """
  createNumbers(data: [NumberCreationInput!]!): [Number!]!

  """Delete the Number with the provided primary key."""
  deleteNumber(id: Int!): Number

  """Delete multiple Numbers matching the provided `where` filter."""
  deleteNumbers(where: NumberFilter): [Number!]!

  """
  Update the Number with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateNumber(id: Int!, data: NumberUpdateInput!): Number

  """
  Update multiple Numbers matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateNumbers(where: NumberFilter, data: NumberUpdateInput!): [Number!]!
}