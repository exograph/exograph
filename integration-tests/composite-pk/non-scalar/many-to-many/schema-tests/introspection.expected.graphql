type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

type Chat {
  id: Int!
  title: String!
  participants(where: ChatParticipationFilter, orderBy: [ChatParticipationOrdering!], limit: Int, offset: Int): [ChatParticipation!]
  participantsAgg(where: ChatParticipationFilter): ChatParticipationAgg
}

"""An aggregate for the `Chat` type."""
type ChatAgg {
  id: IntAgg
  title: StringAgg
}

input ChatCreationInput {
  title: String!
  participants: [ChatParticipationCreationInputFromChat!]
}

"""
Predicate for the `Chat` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ChatFilter {
  id: IntFilter
  title: StringFilter
  participants: ChatParticipationFilter
  and: [ChatFilter!]
  or: [ChatFilter!]
  not: ChatFilter
}

input ChatOrdering {
  id: Ordering
  title: Ordering
}

type ChatParticipation {
  chat: Chat!
  user: User!
  chatAdmin: Boolean
  moods(where: MoodFilter, orderBy: [MoodOrdering!], limit: Int, offset: Int): [Mood!]
  moodsAgg(where: MoodFilter): MoodAgg
}

"""An aggregate for the `ChatParticipation` type."""
type ChatParticipationAgg {
  chat: ChatAgg
  user: UserAgg
  chatAdmin: BooleanAgg
}

input ChatParticipationCreationInput {
  chat: ChatReferenceInput!
  user: UserReferenceInput!
  chatAdmin: Boolean
  moods: [MoodCreationInputFromChatParticipation!]
}

input ChatParticipationCreationInputFromChat {
  user: UserReferenceInput!
  chatAdmin: Boolean
  moods: [MoodCreationInputFromChatParticipation!]
}

input ChatParticipationCreationInputFromUser {
  chat: ChatReferenceInput!
  chatAdmin: Boolean
  moods: [MoodCreationInputFromChatParticipation!]
}

"""
Predicate for the `ChatParticipation` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ChatParticipationFilter {
  chat: ChatFilter
  user: UserFilter
  chatAdmin: BooleanFilter
  moods: MoodFilter
  and: [ChatParticipationFilter!]
  or: [ChatParticipationFilter!]
  not: ChatParticipationFilter
}

input ChatParticipationOrdering {
  chat: [ChatOrdering!]
  user: [UserOrdering!]
  chatAdmin: Ordering
}

input ChatParticipationReferenceInput {
  chat: ChatReferenceInput!
  user: UserReferenceInput!
}

input ChatParticipationUpdateInput {
  chat: ChatReferenceInput
  user: UserReferenceInput
  chatAdmin: Boolean
  moods: MoodUpdateInputFromChatParticipation
}

input ChatParticipationUpdateInputFromChat {
  create: [ChatParticipationCreationInputFromChat!]
  update: [ChatParticipationUpdateInputFromChatNested!]
  delete: [ChatParticipationReferenceInput!]
}

input ChatParticipationUpdateInputFromChatNested {
  user: ChatUpdateInput!
  chatAdmin: Boolean
  moods: MoodUpdateInputFromChatParticipation
}

input ChatParticipationUpdateInputFromUser {
  create: [ChatParticipationCreationInputFromUser!]
  update: [ChatParticipationUpdateInputFromUserNested!]
  delete: [ChatParticipationReferenceInput!]
}

input ChatParticipationUpdateInputFromUserNested {
  chat: ChatUpdateInput!
  chatAdmin: Boolean
  moods: MoodUpdateInputFromChatParticipation
}

input ChatReferenceInput {
  id: Int!
}

"""A predicate to filter the results for a `Chat` type parameter."""
input ChatUniqueFilter {
  id: Int!
}

input ChatUpdateInput {
  id: Int
  title: String
  participants: ChatParticipationUpdateInputFromChat
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mood {
  id: Int!
  name: String!
  chatParticipation: ChatParticipation!
}

"""An aggregate for the `Mood` type."""
type MoodAgg {
  id: IntAgg
  name: StringAgg
}

input MoodCreationInput {
  name: String!
  chatParticipation: ChatParticipationReferenceInput!
}

input MoodCreationInputFromChatParticipation {
  name: String!
}

"""
Predicate for the `Mood` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input MoodFilter {
  id: IntFilter
  name: StringFilter
  chatParticipation: ChatParticipationFilter
  and: [MoodFilter!]
  or: [MoodFilter!]
  not: MoodFilter
}

input MoodOrdering {
  id: Ordering
  name: Ordering
  chatParticipation: [ChatParticipationOrdering!]
}

input MoodReferenceInput {
  id: Int!
}

input MoodUpdateInput {
  id: Int
  name: String
  chatParticipation: ChatParticipationReferenceInput
}

input MoodUpdateInputFromChatParticipation {
  create: [MoodCreationInputFromChatParticipation!]
  update: [MoodUpdateInputFromChatParticipationNested!]
  delete: [MoodReferenceInput!]
}

input MoodUpdateInputFromChatParticipationNested {
  id: Int!
  name: String
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  participatesIn(where: ChatParticipationFilter, orderBy: [ChatParticipationOrdering!], limit: Int, offset: Int): [ChatParticipation!]
  participatesInAgg(where: ChatParticipationFilter): ChatParticipationAgg
}

"""An aggregate for the `User` type."""
type UserAgg {
  id: IntAgg
  name: StringAgg
}

input UserCreationInput {
  name: String!
  participatesIn: [ChatParticipationCreationInputFromUser!]
}

"""
Predicate for the `User` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input UserFilter {
  id: IntFilter
  name: StringFilter
  participatesIn: ChatParticipationFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  name: Ordering
}

input UserReferenceInput {
  id: Int!
}

"""A predicate to filter the results for a `User` type parameter."""
input UserUniqueFilter {
  id: Int!
}

input UserUpdateInput {
  id: Int
  name: String
  participatesIn: ChatParticipationUpdateInputFromUser
}

type Query {
  """Get a single `Chat` given primary key fields"""
  chat(id: Int!): Chat

  """Get a single `ChatParticipation` given primary key fields"""
  chatParticipation(chat: ChatUniqueFilter!, user: UserUniqueFilter!): ChatParticipation

  """
  Get multiple `ChatParticipation`s given the provided `where` filter, order by, limit, and offset
  """
  chatParticipations(where: ChatParticipationFilter, orderBy: [ChatParticipationOrdering!], limit: Int, offset: Int): [ChatParticipation!]!

  """
  Get the aggregate value of the selected fields over all `ChatParticipation`s given the provided `where` filter
  """
  chatParticipationsAgg(where: ChatParticipationFilter): ChatParticipationAgg!

  """
  Get multiple `Chat`s given the provided `where` filter, order by, limit, and offset
  """
  chats(where: ChatFilter, orderBy: [ChatOrdering!], limit: Int, offset: Int): [Chat!]!

  """
  Get the aggregate value of the selected fields over all `Chat`s given the provided `where` filter
  """
  chatsAgg(where: ChatFilter): ChatAgg!

  """Get a single `Mood` given primary key fields"""
  mood(id: Int!): Mood

  """
  Get multiple `Mood`s given the provided `where` filter, order by, limit, and offset
  """
  moods(where: MoodFilter, orderBy: [MoodOrdering!], limit: Int, offset: Int): [Mood!]!

  """
  Get the aggregate value of the selected fields over all `Mood`s given the provided `where` filter
  """
  moodsAgg(where: MoodFilter): MoodAgg!

  """Get a single `User` given primary key fields"""
  user(id: Int!): User

  """
  Get multiple `User`s given the provided `where` filter, order by, limit, and offset
  """
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!

  """
  Get the aggregate value of the selected fields over all `User`s given the provided `where` filter
  """
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  """
  Create a new Chat. Check the `ChatCreationInput` type for the expected shape of the data.
  """
  createChat(data: ChatCreationInput!): Chat!

  """
  Create a new ChatParticipation. Check the `ChatParticipationCreationInput` type for the expected shape of the data.
  """
  createChatParticipation(data: ChatParticipationCreationInput!): ChatParticipation!

  """
  Create multiple ChatParticipations. Check the `ChatParticipationCreationInput` type for the expected shape of the data.
  """
  createChatParticipations(data: [ChatParticipationCreationInput!]!): [ChatParticipation!]!

  """
  Create multiple Chats. Check the `ChatCreationInput` type for the expected shape of the data.
  """
  createChats(data: [ChatCreationInput!]!): [Chat!]!

  """
  Create a new Mood. Check the `MoodCreationInput` type for the expected shape of the data.
  """
  createMood(data: MoodCreationInput!): Mood!

  """
  Create multiple Moods. Check the `MoodCreationInput` type for the expected shape of the data.
  """
  createMoods(data: [MoodCreationInput!]!): [Mood!]!

  """
  Create a new User. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUser(data: UserCreationInput!): User!

  """
  Create multiple Users. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUsers(data: [UserCreationInput!]!): [User!]!

  """Delete the Chat with the provided primary key."""
  deleteChat(id: Int!): Chat

  """Delete the ChatParticipation with the provided primary key."""
  deleteChatParticipation(chat: ChatUniqueFilter!, user: UserUniqueFilter!): ChatParticipation

  """
  Delete multiple ChatParticipations matching the provided `where` filter.
  """
  deleteChatParticipations(where: ChatParticipationFilter): [ChatParticipation!]!

  """Delete multiple Chats matching the provided `where` filter."""
  deleteChats(where: ChatFilter): [Chat!]!

  """Delete the Mood with the provided primary key."""
  deleteMood(id: Int!): Mood

  """Delete multiple Moods matching the provided `where` filter."""
  deleteMoods(where: MoodFilter): [Mood!]!

  """Delete the User with the provided primary key."""
  deleteUser(id: Int!): User

  """Delete multiple Users matching the provided `where` filter."""
  deleteUsers(where: UserFilter): [User!]!

  """
  Update the Chat with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateChat(id: Int!, data: ChatUpdateInput!): Chat

  """
  Update the ChatParticipation with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateChatParticipation(chat: ChatUniqueFilter!, user: UserUniqueFilter!, data: ChatParticipationUpdateInput!): ChatParticipation

  """
  Update multiple ChatParticipations matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateChatParticipations(where: ChatParticipationFilter, data: ChatParticipationUpdateInput!): [ChatParticipation!]!

  """
  Update multiple Chats matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateChats(where: ChatFilter, data: ChatUpdateInput!): [Chat!]!

  """
  Update the Mood with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateMood(id: Int!, data: MoodUpdateInput!): Mood

  """
  Update multiple Moods matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateMoods(where: MoodFilter, data: MoodUpdateInput!): [Mood!]!

  """
  Update the User with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateUser(id: Int!, data: UserUpdateInput!): User

  """
  Update multiple Users matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}