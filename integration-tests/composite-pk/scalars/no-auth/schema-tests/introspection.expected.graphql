type Address {
  street: String!
  city: String!
  state: String!
  zip: Int!
  info: String
  people(where: PersonFilter, orderBy: [PersonOrdering!], limit: Int, offset: Int): [Person!]
  peopleAgg(where: PersonFilter): PersonAgg
}

"""An aggregate for the `Address` type."""
type AddressAgg {
  street: StringAgg
  city: StringAgg
  state: StringAgg
  zip: IntAgg
  info: StringAgg
}

input AddressCreationInput {
  street: String!
  city: String!
  state: String!
  zip: Int!
  info: String
  people: [PersonCreationInputFromAddress!]
}

"""
Predicate for the `Address` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input AddressFilter {
  street: StringFilter
  city: StringFilter
  state: StringFilter
  zip: IntFilter
  info: StringFilter
  people: PersonFilter
  and: [AddressFilter!]
  or: [AddressFilter!]
  not: AddressFilter
}

input AddressOrdering {
  street: Ordering
  city: Ordering
  state: Ordering
  zip: Ordering
  info: Ordering
}

input AddressReferenceInput {
  street: String!
  city: String!
  state: String!
  zip: Int!
}

input AddressUpdateInput {
  street: String
  city: String
  state: String
  zip: Int
  info: String
  people: PersonUpdateInputFromAddress
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Person {
  firstName: String!
  lastName: String!
  age: Int!
  address: Address
}

"""An aggregate for the `Person` type."""
type PersonAgg {
  firstName: StringAgg
  lastName: StringAgg
  age: IntAgg
}

input PersonCreationInput {
  firstName: String!
  lastName: String!
  age: Int!
  address: AddressReferenceInput
}

input PersonCreationInputFromAddress {
  firstName: String!
  lastName: String!
  age: Int!
}

"""
Predicate for the `Person` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input PersonFilter {
  firstName: StringFilter
  lastName: StringFilter
  age: IntFilter
  address: AddressFilter
  and: [PersonFilter!]
  or: [PersonFilter!]
  not: PersonFilter
}

input PersonOrdering {
  firstName: Ordering
  lastName: Ordering
  age: Ordering
  address: [AddressOrdering!]
}

input PersonReferenceInput {
  firstName: String!
  lastName: String!
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  age: Int
  address: AddressReferenceInput
}

input PersonUpdateInputFromAddress {
  create: [PersonCreationInputFromAddress!]
  update: [PersonUpdateInputFromAddressNested!]
  delete: [PersonReferenceInput!]
}

input PersonUpdateInputFromAddressNested {
  firstName: String!
  lastName: String!
  age: Int
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Address` given primary key fields"""
  address(street: String!, city: String!, state: String!, zip: Int!): Address

  """
  Get multiple `Address`s given the provided `where` filter, order by, limit, and offset
  """
  addresses(where: AddressFilter, orderBy: [AddressOrdering!], limit: Int, offset: Int): [Address!]!

  """
  Get the aggregate value of the selected fields over all `Address`s given the provided `where` filter
  """
  addressesAgg(where: AddressFilter): AddressAgg!

  """
  Get multiple `Person`s given the provided `where` filter, order by, limit, and offset
  """
  people(where: PersonFilter, orderBy: [PersonOrdering!], limit: Int, offset: Int): [Person!]!

  """
  Get the aggregate value of the selected fields over all `Person`s given the provided `where` filter
  """
  peopleAgg(where: PersonFilter): PersonAgg!

  """Get a single `Person` given primary key fields"""
  person(firstName: String!, lastName: String!): Person
}

type Mutation {
  """
  Create a new Address. Check the `AddressCreationInput` type for the expected shape of the data.
  """
  createAddress(data: AddressCreationInput!): Address!

  """
  Create multiple Addresss. Check the `AddressCreationInput` type for the expected shape of the data.
  """
  createAddresses(data: [AddressCreationInput!]!): [Address!]!

  """
  Create multiple Persons. Check the `PersonCreationInput` type for the expected shape of the data.
  """
  createPeople(data: [PersonCreationInput!]!): [Person!]!

  """
  Create a new Person. Check the `PersonCreationInput` type for the expected shape of the data.
  """
  createPerson(data: PersonCreationInput!): Person!

  """Delete the Address with the provided primary key."""
  deleteAddress(street: String!, city: String!, state: String!, zip: Int!): Address

  """Delete multiple Addresss matching the provided `where` filter."""
  deleteAddresses(where: AddressFilter): [Address!]!

  """Delete multiple Persons matching the provided `where` filter."""
  deletePeople(where: PersonFilter): [Person!]!

  """Delete the Person with the provided primary key."""
  deletePerson(firstName: String!, lastName: String!): Person

  """
  Update the Address with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateAddress(street: String!, city: String!, state: String!, zip: Int!, data: AddressUpdateInput!): Address

  """
  Update multiple Addresss matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateAddresses(where: AddressFilter, data: AddressUpdateInput!): [Address!]!

  """
  Update multiple Persons matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updatePeople(where: PersonFilter, data: PersonUpdateInput!): [Person!]!

  """
  Update the Person with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updatePerson(firstName: String!, lastName: String!, data: PersonUpdateInput!): Person
}