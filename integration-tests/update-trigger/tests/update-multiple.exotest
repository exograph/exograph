stages:
  - deno: |
      function assertTimestampUpdate(actual, minimum) {
        const minimum_ms = Date.parse(minimum);
        const actual_ms = Date.parse(actual);

        if (actual_ms <= minimum_ms) {
            throw new ExographError(
              "Update time not correct: expected later than " + minimum_ms + ", got " + actual_ms
            )
        }

        const now_ms = Date.now();

        if (Math.abs(actual_ms - now_ms) > 5000) {
            throw new ExographError(
              "Time returned is off by more than 5 seconds: expected " + now_ms + ", got " + actual_ms
            )
        } 

        return true
      }
    operation: |
      mutation($maxId: Int!) {
          updateTodos(where: {id: {lt: $maxId}}, data: {completed: true}) {
              id
              title
              completed
              modificationId
              updatedAt @bind(name: "updatedAt")
              updatedAt2
          }
      }
    variable: |
      {
        maxId: $.t3id
      }
    response: |
      {
        "data": {
          "updateTodos": [
            {
              "id": $.t1id,
              "title": "T1",
              "completed": true,
              "modificationId": (modificationId) => {
                  // The uuid must have been changed
                  return modificationId !== $.t1modificationId
              },
              "updatedAt": (updateTime) => {
                  return assertTimestampUpdate(updateTime, $.t1updatedAt)
              },
              "updatedAt2": (updateTime) => {
                return updateTime == $.updatedAt[0]
              }
            },
            {
              "id": $.t2id,
              "title": "T2",
              "completed": true,
              "modificationId": (modificationId) => {
                  // The uuid must have been changed
                  return modificationId !== $.t2modificationId
              },
              "updatedAt": (updateTime) => {
                  return assertTimestampUpdate(updateTime, $.t2updatedAt)
              },
              "updatedAt2": (updateTime) => {
                return updateTime == $.updatedAt[0]
              }
            }
          ]
        }
      }
  - operation: |
      query($minId: Int!) {
          todos(where: {id: {gte: $minId}}) {
              id
              title
              completed
              modificationId
              updatedAt
          }
      }
    response: |
      {
        "data": {
          "todos": [
            {
              "id": $.t3id,
              "title": "T3",
              "completed": true,
              "modificationId": $.t3modificationId,
              "updatedAt": $.t3updatedAt
            },
            {
              "id": $.t4id,
              "title": "T4",
              "completed": false,
              "modificationId": $.t4modificationId,
              "updatedAt": $.t4updatedAt
            }
          ]
        }
      }
    variable: |
      {
        minId: $.t3id
      }