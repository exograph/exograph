type Customer {
  id: Int!
  name: String!
  userId: Int!
  internalTier: Int!
}

"""An aggregate for the `Customer` type."""
type CustomerAgg {
  id: IntAgg
  name: StringAgg
  userId: IntAgg
  internalTier: IntAgg
}

input CustomerCreationInput {
  name: String!
  userId: Int
  internalTier: Int
}

"""
Predicate for the `Customer` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input CustomerFilter {
  id: IntFilter
  name: StringFilter
  userId: IntFilter
  internalTier: IntFilter
  and: [CustomerFilter!]
  or: [CustomerFilter!]
  not: CustomerFilter
}

input CustomerOrdering {
  id: Ordering
  name: Ordering
  userId: Ordering
  internalTier: Ordering
}

input CustomerUpdateInput {
  id: Int
  name: String
  userId: Int
  internalTier: Int
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """Get a single `Customer` given primary key fields"""
  customer(id: Int!): Customer

  """
  Get multiple `Customer`s given the provided `where` filter, order by, limit, and offset
  """
  customers(where: CustomerFilter, orderBy: [CustomerOrdering!], limit: Int, offset: Int): [Customer!]!

  """
  Get the aggregate value of the selected fields over all `Customer`s given the provided `where` filter
  """
  customersAgg(where: CustomerFilter): CustomerAgg!
}

type Mutation {
  """
  Create a new Customer. Check the `CustomerCreationInput` type for the expected shape of the data.
  """
  createCustomer(data: CustomerCreationInput!): Customer!

  """
  Create multiple Customers. Check the `CustomerCreationInput` type for the expected shape of the data.
  """
  createCustomers(data: [CustomerCreationInput!]!): [Customer!]!

  """Delete the Customer with the provided primary key."""
  deleteCustomer(id: Int!): Customer

  """Delete multiple Customers matching the provided `where` filter."""
  deleteCustomers(where: CustomerFilter): [Customer!]!

  """
  Update the Customer with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateCustomer(id: Int!, data: CustomerUpdateInput!): Customer

  """
  Update multiple Customers matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateCustomers(where: CustomerFilter, data: CustomerUpdateInput!): [Customer!]!
}