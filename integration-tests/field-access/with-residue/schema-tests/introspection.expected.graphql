type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Person {
  id: Int!
  name: String!
  age: Int!
  authId: Int!
  email: String
}

"""An aggregate for the `Person` type."""
type PersonAgg {
  id: IntAgg
  name: StringAgg
  age: IntAgg
  authId: IntAgg
  email: StringAgg
}

input PersonCreationInput {
  name: String!
  age: Int!
  authId: Int!
  email: String
}

"""
Predicate for the `Person` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input PersonFilter {
  id: IntFilter
  name: StringFilter
  age: IntFilter
  authId: IntFilter
  email: StringFilter
  and: [PersonFilter!]
  or: [PersonFilter!]
  not: PersonFilter
}

input PersonOrdering {
  id: Ordering
  name: Ordering
  age: Ordering
  authId: Ordering
  email: Ordering
}

input PersonUpdateInput {
  id: Int
  name: String
  age: Int
  authId: Int
  email: String
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Query {
  """
  Get multiple `Person`s given the provided `where` filter, order by, limit, and offset
  """
  people(where: PersonFilter, orderBy: [PersonOrdering!], limit: Int, offset: Int): [Person!]!

  """
  Get the aggregate value of the selected fields over all `Person`s given the provided `where` filter
  """
  peopleAgg(where: PersonFilter): PersonAgg!

  """Get a single `Person` given primary key fields"""
  person(id: Int!): Person
}

type Mutation {
  """
  Create multiple Persons. Check the `PersonCreationInput` type for the expected shape of the data.
  """
  createPeople(data: [PersonCreationInput!]!): [Person!]!

  """
  Create a new Person. Check the `PersonCreationInput` type for the expected shape of the data.
  """
  createPerson(data: PersonCreationInput!): Person!

  """Delete multiple Persons matching the provided `where` filter."""
  deletePeople(where: PersonFilter): [Person!]!

  """Delete the Person with the provided primary key."""
  deletePerson(id: Int!): Person

  """
  Update multiple Persons matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updatePeople(where: PersonFilter, data: PersonUpdateInput!): [Person!]!

  """
  Update the Person with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updatePerson(id: Int!, data: PersonUpdateInput!): Person
}