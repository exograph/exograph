type Chunk {
  id: Int!
  todo: Todo!
  chunk: String!
  chunkVector: [Float!]
  chunkVectorDistance(to: [Float!]!): Float!
}

"""An aggregate for the `Chunk` type."""
type ChunkAgg {
  id: IntAgg
  chunk: StringAgg
  chunkVector: VectorAgg
}

input ChunkCreationInput {
  todo: TodoReferenceInput!
  chunk: String!
  chunkVector: [Float!]
}

input ChunkCreationInputFromTodo {
  chunk: String!
  chunkVector: [Float!]
}

"""
Predicate for the `Chunk` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input ChunkFilter {
  id: IntFilter
  todo: TodoFilter
  chunk: StringFilter
  chunkVector: VectorFilter
  and: [ChunkFilter!]
  or: [ChunkFilter!]
  not: ChunkFilter
}

input ChunkOrdering {
  id: Ordering
  todo: [TodoOrdering!]
  chunk: Ordering
  chunkVector: VectorOrdering
}

input ChunkReferenceInput {
  id: Int!
}

input ChunkUpdateInput {
  id: Int
  todo: TodoReferenceInput
  chunk: String
  chunkVector: [Float!]
}

input ChunkUpdateInputFromTodo {
  create: [ChunkCreationInputFromTodo!]
  update: [ChunkUpdateInputFromTodoNested!]
  delete: [ChunkReferenceInput!]
}

input ChunkUpdateInputFromTodoNested {
  id: Int!
  chunk: String
  chunkVector: [Float!]
}

input FloatFilter {
  eq: Float
  neq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type Todo {
  id: Int!
  title: String!
  description: String!
  chunks(where: ChunkFilter, orderBy: [ChunkOrdering!], limit: Int, offset: Int): [Chunk!]
  chunksAgg(where: ChunkFilter): ChunkAgg
}

"""An aggregate for the `Todo` type."""
type TodoAgg {
  id: IntAgg
  title: StringAgg
  description: StringAgg
}

input TodoCreationInput {
  title: String!
  description: String!
  chunks: [ChunkCreationInputFromTodo!]
}

"""
Predicate for the `Todo` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input TodoFilter {
  id: IntFilter
  title: StringFilter
  description: StringFilter
  chunks: ChunkFilter
  and: [TodoFilter!]
  or: [TodoFilter!]
  not: TodoFilter
}

input TodoOrdering {
  id: Ordering
  title: Ordering
  description: Ordering
}

input TodoReferenceInput {
  id: Int!
}

input TodoUpdateInput {
  id: Int
  title: String
  description: String
  chunks: ChunkUpdateInputFromTodo
}

scalar Vector

type VectorAgg {
  avg: Vector
  count: Int
}

input VectorFilter {
  similar: VectorFilterArg
  eq: [Float!]
  neq: [Float!]
}

"""Predicate to filter based on vector distance"""
input VectorFilterArg {
  """The target vector to compare against."""
  distanceTo: [Float!]!

  """The distance to the vector."""
  distance: FloatFilter
}

input VectorOrdering {
  distanceTo: [Float!]!
  order: Ordering
}

type Query {
  """Get a single `Chunk` given primary key fields"""
  chunk(id: Int!): Chunk

  """
  Get multiple `Chunk`s given the provided `where` filter, order by, limit, and offset
  """
  chunks(where: ChunkFilter, orderBy: [ChunkOrdering!], limit: Int, offset: Int): [Chunk!]!

  """
  Get the aggregate value of the selected fields over all `Chunk`s given the provided `where` filter
  """
  chunksAgg(where: ChunkFilter): ChunkAgg!

  """Get a single `Todo` given primary key fields"""
  todo(id: Int!): Todo

  """
  Get multiple `Todo`s given the provided `where` filter, order by, limit, and offset
  """
  todos(where: TodoFilter, orderBy: [TodoOrdering!], limit: Int, offset: Int): [Todo!]!

  """
  Get the aggregate value of the selected fields over all `Todo`s given the provided `where` filter
  """
  todosAgg(where: TodoFilter): TodoAgg!
}

type Mutation {
  """
  Create a new Chunk. Check the `ChunkCreationInput` type for the expected shape of the data.
  """
  createChunk(data: ChunkCreationInput!): Chunk!

  """
  Create multiple Chunks. Check the `ChunkCreationInput` type for the expected shape of the data.
  """
  createChunks(data: [ChunkCreationInput!]!): [Chunk!]!

  """
  Create a new Todo. Check the `TodoCreationInput` type for the expected shape of the data.
  """
  createTodo(data: TodoCreationInput!): Todo!

  """
  Create multiple Todos. Check the `TodoCreationInput` type for the expected shape of the data.
  """
  createTodos(data: [TodoCreationInput!]!): [Todo!]!

  """Delete the Chunk with the provided primary key."""
  deleteChunk(id: Int!): Chunk

  """Delete multiple Chunks matching the provided `where` filter."""
  deleteChunks(where: ChunkFilter): [Chunk!]!

  """Delete the Todo with the provided primary key."""
  deleteTodo(id: Int!): Todo

  """Delete multiple Todos matching the provided `where` filter."""
  deleteTodos(where: TodoFilter): [Todo!]!

  """
  Update the Chunk with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateChunk(id: Int!, data: ChunkUpdateInput!): Chunk

  """
  Update multiple Chunks matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateChunks(where: ChunkFilter, data: ChunkUpdateInput!): [Chunk!]!

  """
  Update the Todo with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateTodo(id: Int!, data: TodoUpdateInput!): Todo

  """
  Update multiple Todos matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateTodos(where: TodoFilter, data: TodoUpdateInput!): [Todo!]!
}