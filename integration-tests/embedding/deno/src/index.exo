// Content vector is manually computed 3-dimensional vector to represent [Transporation, Heavy, Animal]

@postgres
module DocumentDatabase {
  @access(true)
  type Document {
    @pk id: Int = autoIncrement()
    title: String
    content: String
    @distanceFunction("cosine") @index @size(3) contentVector: Vector?
  }
}

@deno("embedding.ts")
module DocumentEmbedding {
  @access(true)
  type DocumentResult {
    id: Int
    title: String
    content: String
    contentVector: Vector?
  }

  @around("mutation createDocument*")
  interceptor createEmbedding(operation: Operation, exograph: Exograph)

  @around("mutation updateDocument*")
  interceptor updateEmbedding(operation: Operation, exograph: Exograph)

  @access(true)
  query searchDocuments(searchString: String, @inject exograph: Exograph): Set<DocumentResult>

  // A pass-through query to ensure that we can use the `Vector` type in Deno queries
  @access(true)
  query searchDocumentsByVector(searchVector: Vector, @inject exograph: Exograph): Set<DocumentResult>

  // To ensure that we can use the `Vector` as a return type in Deno queries
  @access(true)
  query getEmbedding(searchString: String, @inject exograph: Exograph): Vector
}