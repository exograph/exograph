type BooleanAgg {
  count: Int
}

input BooleanFilter {
  eq: Boolean
  neq: Boolean
}

type Document {
  id: Int!
  content: String!
  permissions(where: PermissionFilter, orderBy: [PermissionOrdering!], limit: Int, offset: Int): [Permission!]
  permissionsAgg(where: PermissionFilter): PermissionAgg
}

"""An aggregate for the `Document` type."""
type DocumentAgg {
  id: IntAgg
  content: StringAgg
}

input DocumentCreationInput {
  content: String!
  permissions: [PermissionCreationInputFromDocument!]
}

"""
Predicate for the `Document` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input DocumentFilter {
  id: IntFilter
  content: StringFilter
  permissions: PermissionFilter
  and: [DocumentFilter!]
  or: [DocumentFilter!]
  not: DocumentFilter
}

input DocumentOrdering {
  id: Ordering
  content: Ordering
}

input DocumentReferenceInput {
  id: Int!
}

input DocumentUpdateInput {
  id: Int
  content: String
  permissions: PermissionUpdateInputFromDocument
}

type IntAgg {
  min: Int
  max: Int
  sum: Int
  avg: Float
  count: Int
}

input IntFilter {
  eq: Int
  neq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

enum Ordering {
  ASC
  DESC
}

type Permission {
  id: Int!
  document: Document!
  user: User!
  read: Boolean!
  write: Boolean!
}

"""An aggregate for the `Permission` type."""
type PermissionAgg {
  id: IntAgg
  read: BooleanAgg
  write: BooleanAgg
}

input PermissionCreationInput {
  document: DocumentReferenceInput!
  user: UserReferenceInput!
  read: Boolean!
  write: Boolean!
}

input PermissionCreationInputFromDocument {
  user: UserReferenceInput!
  read: Boolean!
  write: Boolean!
}

input PermissionCreationInputFromUser {
  document: DocumentReferenceInput!
  read: Boolean!
  write: Boolean!
}

"""
Predicate for the `Permission` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input PermissionFilter {
  id: IntFilter
  document: DocumentFilter
  user: UserFilter
  read: BooleanFilter
  write: BooleanFilter
  and: [PermissionFilter!]
  or: [PermissionFilter!]
  not: PermissionFilter
}

input PermissionOrdering {
  id: Ordering
  document: [DocumentOrdering!]
  user: [UserOrdering!]
  read: Ordering
  write: Ordering
}

input PermissionReferenceInput {
  id: Int!
}

input PermissionUpdateInput {
  id: Int
  document: DocumentReferenceInput
  user: UserReferenceInput
  read: Boolean
  write: Boolean
}

input PermissionUpdateInputFromDocument {
  create: [PermissionCreationInputFromDocument!]
  update: [PermissionUpdateInputFromDocumentNested!]
  delete: [PermissionReferenceInput!]
}

input PermissionUpdateInputFromDocumentNested {
  id: Int!
  user: UserReferenceInput
  read: Boolean
  write: Boolean
}

input PermissionUpdateInputFromUser {
  create: [PermissionCreationInputFromUser!]
  update: [PermissionUpdateInputFromUserNested!]
  delete: [PermissionReferenceInput!]
}

input PermissionUpdateInputFromUserNested {
  id: Int!
  document: DocumentReferenceInput
  read: Boolean
  write: Boolean
}

type StringAgg {
  min: String
  max: String
  count: Int
}

input StringFilter {
  eq: String
  neq: String
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  ilike: String
  startsWith: String
  endsWith: String
}

type User {
  id: Int!
  name: String!
  permissions(where: PermissionFilter, orderBy: [PermissionOrdering!], limit: Int, offset: Int): [Permission!]
  permissionsAgg(where: PermissionFilter): PermissionAgg
}

"""An aggregate for the `User` type."""
type UserAgg {
  id: IntAgg
  name: StringAgg
}

input UserCreationInput {
  name: String!
  permissions: [PermissionCreationInputFromUser!]
}

"""
Predicate for the `User` type parameter. 
If a field is omitted, no filter is applied for that field.
To check a field against null, use a `<field name>: null` filter
"""
input UserFilter {
  id: IntFilter
  name: StringFilter
  permissions: PermissionFilter
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

input UserOrdering {
  id: Ordering
  name: Ordering
}

input UserReferenceInput {
  id: Int!
}

input UserUpdateInput {
  id: Int
  name: String
  permissions: PermissionUpdateInputFromUser
}

type Query {
  """Get a single `Document` given primary key fields"""
  document(id: Int!): Document

  """
  Get multiple `Document`s given the provided `where` filter, order by, limit, and offset
  """
  documents(where: DocumentFilter, orderBy: [DocumentOrdering!], limit: Int, offset: Int): [Document!]!

  """
  Get the aggregate value of the selected fields over all `Document`s given the provided `where` filter
  """
  documentsAgg(where: DocumentFilter): DocumentAgg!

  """Get a single `Permission` given primary key fields"""
  permission(id: Int!): Permission

  """
  Get multiple `Permission`s given the provided `where` filter, order by, limit, and offset
  """
  permissions(where: PermissionFilter, orderBy: [PermissionOrdering!], limit: Int, offset: Int): [Permission!]!

  """
  Get the aggregate value of the selected fields over all `Permission`s given the provided `where` filter
  """
  permissionsAgg(where: PermissionFilter): PermissionAgg!

  """Get a single `User` given primary key fields"""
  user(id: Int!): User

  """
  Get multiple `User`s given the provided `where` filter, order by, limit, and offset
  """
  users(where: UserFilter, orderBy: [UserOrdering!], limit: Int, offset: Int): [User!]!

  """
  Get the aggregate value of the selected fields over all `User`s given the provided `where` filter
  """
  usersAgg(where: UserFilter): UserAgg!
}

type Mutation {
  """
  Create a new Document. Check the `DocumentCreationInput` type for the expected shape of the data.
  """
  createDocument(data: DocumentCreationInput!): Document!

  """
  Create multiple Documents. Check the `DocumentCreationInput` type for the expected shape of the data.
  """
  createDocuments(data: [DocumentCreationInput!]!): [Document!]!

  """
  Create a new Permission. Check the `PermissionCreationInput` type for the expected shape of the data.
  """
  createPermission(data: PermissionCreationInput!): Permission!

  """
  Create multiple Permissions. Check the `PermissionCreationInput` type for the expected shape of the data.
  """
  createPermissions(data: [PermissionCreationInput!]!): [Permission!]!

  """
  Create a new User. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUser(data: UserCreationInput!): User!

  """
  Create multiple Users. Check the `UserCreationInput` type for the expected shape of the data.
  """
  createUsers(data: [UserCreationInput!]!): [User!]!

  """Delete the Document with the provided primary key."""
  deleteDocument(id: Int!): Document

  """Delete multiple Documents matching the provided `where` filter."""
  deleteDocuments(where: DocumentFilter): [Document!]!

  """Delete the Permission with the provided primary key."""
  deletePermission(id: Int!): Permission

  """Delete multiple Permissions matching the provided `where` filter."""
  deletePermissions(where: PermissionFilter): [Permission!]!

  """Delete the User with the provided primary key."""
  deleteUser(id: Int!): User

  """Delete multiple Users matching the provided `where` filter."""
  deleteUsers(where: UserFilter): [User!]!

  """
  Update the Document with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateDocument(id: Int!, data: DocumentUpdateInput!): Document

  """
  Update multiple Documents matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateDocuments(where: DocumentFilter, data: DocumentUpdateInput!): [Document!]!

  """
  Update the Permission with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updatePermission(id: Int!, data: PermissionUpdateInput!): Permission

  """
  Update multiple Permissions matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updatePermissions(where: PermissionFilter, data: PermissionUpdateInput!): [Permission!]!

  """
  Update the User with the provided primary key with the provided data. Any fields not provided will remain unchanged.
  """
  updateUser(id: Int!, data: UserUpdateInput!): User

  """
  Update multiple Users matching the provided `where` filter with the provided data. Any fields not provided will remain unchanged.
  """
  updateUsers(where: UserFilter, data: UserUpdateInput!): [User!]!
}