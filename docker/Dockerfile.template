ARG BUILD_IMAGE
ARG BASE_IMAGE

FROM ${BUILD_IMAGE} as builder

# Compile the binaries (exo and exo-server)

ARG BUILD_DIR
ARG BUILD_FLAG

%%BUILD_SETUP%%

WORKDIR /usr/src

## Build and cache the dependencies
### Create empty projects with the right type (lib/bin)

%%CREATE_EMPTY_PROJECTS%%

### Copy over Cargo.toml and Cargo.lock files so that we can build just
### the dependencies and cache this layer when only source files change
COPY ./Cargo.toml ./Cargo.toml
COPY ./Cargo.lock ./Cargo.lock

%%COPY_CARGO_TOMLS%%


COPY ./graphiql/package.json ./graphiql/package.json
COPY ./graphiql/package-lock.json ./graphiql/package-lock.json

### Compile the depdencies and remove artifacts related to the non-dependency parts (so that when we use real code, they get rebuilt)
RUN CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse  cargo build --all ${BUILD_FLAG}

%%RM_DEPS%% 
## Build the actual image
### Copy over the source files
ADD crates crates/
ADD libs libs/
ADD graphiql graphiql/


### Build the binaries (first the graphiql app and then the rest)
RUN CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse cargo build --all ${BUILD_FLAG}

# Create an image to include the compiled binaries
ARG BASE_IMAGE
FROM $BASE_IMAGE as exo-builder

ARG BUILD_DIR
ARG APP=/usr/src/app

RUN mkdir -p ${APP}

COPY --from=builder /usr/src/target/${BUILD_DIR}/exo-server ${APP}/exo-server
COPY --from=builder /usr/src/target/${BUILD_DIR}/exo ${APP}/exo
COPY --from=builder /usr/src/target/${BUILD_DIR}/bootstrap ${APP}/bootstrap
COPY --from=builder /usr/src/target/${BUILD_DIR}/*.so ${APP}/

# Create an image that can be used for development--the `exo dev` style
FROM exo-builder as exo-dev

ARG BUILD_DIR
ARG APP=/usr/src/app

ENV TZ=Etc/UTC
ENV APP_USER=exo

%%RUNTIME_SETUP%%

WORKDIR ${APP}
