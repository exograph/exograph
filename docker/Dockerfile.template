ARG BUILD_IMAGE
ARG BASE_IMAGE

FROM ${BUILD_IMAGE} as builder

# Compile the binaries (clay and clay-server)

ARG BUILD_DIR
ARG BUILD_FLAG

%%BUILD_SETUP%%

ENV PATH "$PATH:/root/.cargo/bin"
RUN cargo install --version 0.20.6 tree-sitter-cli

WORKDIR /usr/src

## Build and cache the dependencies
### Create empty projects with the right type (lib/bin)
RUN USER=root cargo new --vcs none --bin cli
RUN USER=root cargo new --vcs none --lib core-subsystem/core-model-builder
RUN USER=root cargo new --vcs none --lib database-subsystem/database-model-builder
RUN USER=root cargo new --vcs none --lib payas-deno
RUN USER=root cargo new --vcs none --lib payas-model
RUN USER=root cargo new --vcs none --lib builder
RUN USER=root cargo new --vcs none --lib core-resolver
RUN USER=root cargo new --vcs none --lib database-resolver
RUN USER=root cargo new --vcs none --lib deno-resolver
RUN USER=root cargo new --vcs none --lib wasm-resolver
RUN USER=root cargo new --vcs none --bin server-actix
RUN USER=root cargo new --vcs none --bin server-aws-lambda
RUN USER=root cargo new --vcs none --lib resolver
RUN USER=root cargo new --vcs none --lib deno-plugin/deno-model-builder
RUN USER=root cargo new --vcs none --lib payas-sql
RUN USER=root cargo new --vcs none --lib test
RUN USER=root cargo new --vcs none --lib payas-wasm

### Copy over Cargo.toml and Cargo.lock files so that we can build just
### the dependencies and cache this layer when only source files change
COPY ./Cargo.toml ./Cargo.toml
COPY ./Cargo.lock ./Cargo.lock
COPY ./cli/Cargo.toml ./cli/Cargo.toml
COPY ./core-subsystem/core-model-builder/Cargo.toml ./core-subsystem/core-model-builder/Cargo.toml
COPY ./database-subsystem/database-model-builder/Cargo.toml ./database-subsystem/database-model-builder/Cargo.toml
COPY ./payas-deno/Cargo.toml ./payas-deno/Cargo.toml
COPY ./payas-model/Cargo.toml ./payas-model/Cargo.toml
COPY ./builder/Cargo.toml ./builder/Cargo.toml
COPY ./core-resolver/Cargo.toml ./core-resolver/Cargo.toml
COPY ./database-resolver/Cargo.toml ./database-resolver/Cargo.toml
COPY ./deno-resolver/Cargo.toml ./deno-resolver/Cargo.toml
COPY ./wasm-resolver/Cargo.toml ./wasm-resolver/Cargo.toml
COPY ./server-actix/Cargo.toml ./server-actix/Cargo.toml
COPY ./server-aws-lambda/Cargo.toml ./server-aws-lambda/Cargo.toml
COPY ./resolver/Cargo.toml ./resolver/Cargo.toml
COPY ./deno-plugin/deno-model-builder/Cargo.toml ./deno-plugin/deno-model-builder/Cargo.toml
COPY ./payas-sql/Cargo.toml ./payas-sql/Cargo.toml
COPY ./test/Cargo.toml ./test/Cargo.toml
COPY ./payas-wasm/Cargo.toml ./payas-wasm/Cargo.toml

COPY ./graphiql/package.json ./graphiql/package.json
COPY ./graphiql/package-lock.json ./graphiql/package-lock.json

### Compile the depdencies and remove artifacts related to the non-dependency parts (so that when we use real code, they get rebuilt)
RUN cargo build ${BUILD_FLAG} && rm */src/*.rs && rm target/${BUILD_DIR}/deps/payas* && rm -rf target/${BUILD_DIR}/.fingerprint/payas* 
RUN cd graphiql && npm install

## Build the actual image
### Copy over the source files
ADD cli cli/
ADD core-subsystem/core-model-builder/ core-subsystem/core-model-builder/
ADD database-subsystem/database-model-builder database-subsystem/database-model-builder/
ADD payas-deno payas-deno/
ADD payas-model payas-model/
ADD builder builder/
ADD core-resolver core-resolver/
ADD database-resolver database-resolver/
ADD deno-resolver deno-resolver/
ADD wasm-resolver wasm-resolver/
ADD server-actix server-actix/
ADD server-aws-lambda server-aws-lambda/
ADD resolver resolver/
ADD deno-subsystem/deno-model-builder/ deno-subsystem/deno-model-builder/ 
ADD payas-sql payas-sql/
ADD test test/
ADD payas-wasm payas-wasm/

ADD graphiql graphiql/

### Build the binaries (first the graphiql app and then the rest)
RUN cd graphiql && npm run prod-build
RUN cargo build ${BUILD_FLAG}

# Create an image to include the compiled binaries
ARG BASE_IMAGE
FROM $BASE_IMAGE as clay-builder

ARG BUILD_DIR
ARG APP=/usr/src/app

RUN mkdir -p ${APP}

COPY --from=builder /usr/src/target/${BUILD_DIR}/clay-server ${APP}/clay-server
COPY --from=builder /usr/src/target/${BUILD_DIR}/clay ${APP}/clay
COPY --from=builder /usr/src/target/${BUILD_DIR}/bootstrap ${APP}/bootstrap

# Create an image that can be used for development--the `clay serve` style
FROM clay-builder as clay-dev

ARG BUILD_DIR
ARG APP=/usr/src/app

ENV TZ=Etc/UTC
ENV APP_USER=clay

%%RUNTIME_SETUP%%

WORKDIR ${APP}
