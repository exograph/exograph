AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  exo-aws 

  Sample SAM Template for Exograph.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    VpcConfig:
      SubnetIds:
        - !Ref ExographSubnetAZ1
        - !Ref ExographSubnetAZ2
      SecurityGroupIds:
        - !Ref ExographSecurityGroup

Parameters:
  ExographPostgresUsername:
    Type: String
    Default: exo
    Description: The master username of the Exograph RDS DBInstance.
  ExographPostgresPassword:
    Type: String
    Default: exographdbpassword
    Description: The master password of the Exograph RDS DBInstance.
  ExographPostgresName:
    Type: String
    Default: exographdb
    Description: The database name of the Exograph RDS DBInstance.
  ExographIntrospection:
    Type: String
    Default: "true"
    Description: Enable introspection.
  ExographSubnetAZ1:
    Type: AWS::EC2::Subnet::Id
    Description: >
      A subnet allocation for Exograph in one AZ. This subnet should have egress access to the internet.
  ExographSubnetAZ2:
    Type: AWS::EC2::Subnet::Id
    Description: >
      A second subnet allocation for Exograph in another AZ. This should be in a different AZ from the first subnet.
  ExographSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >
      The security group to use with these subnets.

Resources:
  # Amazon RDS instance for Exograph
  ExographPostgres:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref ExographPostgresUsername
      MasterUserPassword: !Ref ExographPostgresPassword
      DBSubnetGroupName: !Ref ExographPostgresSubnetGroup
      StorageType: gp2
  # Amazon RDS requires a DB instance to have subnets in two different AZs
  ExographPostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - !Ref ExographSubnetAZ1
        - !Ref ExographSubnetAZ2
      DBSubnetGroupDescription: "Exograph RDS private subnet group"

  # Exograph schema initialization.
  #
  # When deploying a fresh CloudFormation stack, Exograph must first initialize the PostgreSQL
  # database. This is accomplished through the ExographPostgresInit custom resource. On creation
  # of the stack, ExographPostgresInitFn will be invoked to initialize the database from the SQL file
  # `aws-cf-func/index.sql` (which is populated by build.sh in this directory).
  #
  # In production, we recommend initializing the database manually instead with an EC2 instance attached to
  # your VPC. The two blocks below can be removed without problem.
  ExographPostgresInit:
    DependsOn: ExographPostgres
    Type: "Custom::ExographPostgresInit"
    Properties:
      # invoke ExographPostgresInitFn for stack events
      ServiceToken: !GetAtt ExographPostgresInitFn.Arn
  ExographPostgresInitFn:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.handler
      Runtime: python3.8
      Timeout: 30
      CodeUri: aws-cf-func/.
      Environment:
        Variables:
          EXO_POSTGRES_HOST: !GetAtt [ExographPostgres, Endpoint.Address]
          EXO_POSTGRES_HOST_PORT: !GetAtt [ExographPostgres, Endpoint.Port]
          EXO_POSTGRES_USER: !Ref ExographPostgresUsername
          EXO_POSTGRES_PASSWORD: !Ref ExographPostgresPassword
          EXO_POSTGRES_NAME: !Ref ExographPostgresName
          EXO_INTROSPECTION: !Ref ExographIntrospection

  # The real Exograph Lambda function.
  # This is the lambda that actually serves Exograph API requests.
  ExographFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: aws-app/
      Handler: bootstrap.is.the.handler
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        Exograph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
      Environment:
        Variables:
          EXO_JWT_SECRET: "abcd"
          EXO_CORS_DOMAINS: "*"
          EXO_CONNECTION_POOL_SIZE: 1
          EXO_CHECK_CONNECTION_ON_STARTUP: false
          EXO_POSTGRES_USER: !Ref ExographPostgresUsername
          EXO_POSTGRES_URL: !Sub
            - "postgresql://${Username}:${Password}@${IP}:${Port}/${Postgres}"
            - IP: !GetAtt [ExographPostgres, Endpoint.Address]
              Port: !GetAtt [ExographPostgres, Endpoint.Port]
              Username: !Ref ExographPostgresUsername
              Password: !Ref ExographPostgresPassword
              Postgres: !Ref ExographPostgresName
          EXO_INTROSPECTION: !Ref ExographIntrospection

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ExographApi:
    Description: "API Gateway endpoint URL for Prod stage for Exograph function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"
  ExographFunction:
    Description: "Exograph Lambda Function ARN"
    Value: !GetAtt ExographFunction.Arn
  ExographFunctionIamRole:
    Description: "Implicit IAM Role created for Exograph function"
    Value: !GetAtt ExographFunctionRole.Arn
