AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  clay-aws 

  Sample SAM Template for Claytip. 

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    VpcConfig:
      SubnetIds:
        - !Ref ClaytipSubnetAZ1 
        - !Ref ClaytipSubnetAZ2
      SecurityGroupIds:
        - !Ref ClaytipSecurityGroup

Parameters:
  ClaytipDatabaseUsername:
    Type: String
    Default: clay
    Description: The master username of the Claytip RDS DBInstance.
  ClaytipDatabasePassword:
    Type: String
    Default: claytipdbpassword
    Description: The master password of the Claytip RDS DBInstance.
  ClaytipDatabaseName:
    Type: String
    Default: claytipdb
    Description: The database name of the Claytip RDS DBInstance.
  ClaytipIntrospection:
    Type: String
    Default: "true"
    Description: Enable introspection.
  ClaytipSubnetAZ1:
    Type: AWS::EC2::Subnet::Id
    Description: > 
      A subnet allocation for Claytip in one AZ. This subnet should have egress access to the internet.
  ClaytipSubnetAZ2:
    Type: AWS::EC2::Subnet::Id
    Description: >
      A second subnet allocation for Claytip in another AZ. This should be in a different AZ from the first subnet.
  ClaytipSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >
      The security group to use with these subnets. 

Resources:
  # Amazon RDS instance for Claytip
  ClaytipDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref ClaytipDatabaseUsername
      MasterUserPassword: !Ref ClaytipDatabasePassword
      DBSubnetGroupName: !Ref ClaytipDatabaseSubnetGroup
      StorageType: gp2
  # Amazon RDS requires a DB instance to have subnets in two different AZs
  ClaytipDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - !Ref ClaytipSubnetAZ1 
        - !Ref ClaytipSubnetAZ2
      DBSubnetGroupDescription: "Claytip RDS private subnet group"

  # Claytip schema initialization.
  #
  # When deploying a fresh CloudFormation stack, Claytip must first initialize the PostgreSQL
  # database. This is accomplished through the ClaytipDatabaseInit custom resource. On creation
  # of the stack, ClaytipDatabaseInitFn will be invoked to initialize the database from the SQL file
  # `aws-cf-func/index.sql` (which is populated by build.sh in this directory).
  #
  # In production, we recommend initializing the database manually instead with an EC2 instance attached to
  # your VPC. The two blocks below can be removed without problem.
  ClaytipDatabaseInit: 
    DependsOn: ClaytipDatabase
    Type: "Custom::ClaytipDatabaseInit"
    Properties:
      # invoke ClaytipDatabaseInitFn for stack events
      ServiceToken: !GetAtt ClaytipDatabaseInitFn.Arn
  ClaytipDatabaseInitFn:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.handler
      Runtime: python3.8
      Timeout: 30
      CodeUri: aws-cf-func/.
      Environment:
        Variables:
          CLAY_DATABASE_HOST: !GetAtt [ClaytipDatabase, Endpoint.Address]
          CLAY_DATABASE_HOST_PORT: !GetAtt [ClaytipDatabase, Endpoint.Port]
          CLAY_DATABASE_USER: !Ref ClaytipDatabaseUsername
          CLAY_DATABASE_PASSWORD: !Ref ClaytipDatabasePassword
          CLAY_DATABASE_NAME: !Ref ClaytipDatabaseName
          CLAY_INTROSPECTION: !Ref ClaytipIntrospection

  # The real Claytip Lambda function.
  # This is the lambda that actually serves Claytip API requests. 
  ClaytipFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: aws-app/
      Handler: bootstrap.is.the.handler
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        Claytip:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
      Environment:
        Variables:
          CLAY_JWT_SECRET: "abcd"
          CLAY_CORS_DOMAINS: "*" 
          CLAY_CONNECTION_POOL_SIZE: 1
          CLAY_CHECK_CONNECTION_ON_STARTUP: false 
          CLAY_DATABASE_USER: !Ref ClaytipDatabaseUsername
          CLAY_DATABASE_URL: !Sub 
            - "postgresql://${Username}:${Password}@${IP}:${Port}/${Database}"
            - IP: !GetAtt [ClaytipDatabase, Endpoint.Address]
              Port: !GetAtt [ClaytipDatabase, Endpoint.Port]
              Username: !Ref ClaytipDatabaseUsername
              Password: !Ref ClaytipDatabasePassword
              Database: !Ref ClaytipDatabaseName
          CLAY_INTROSPECTION: !Ref ClaytipIntrospection

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ClaytipApi:
    Description: "API Gateway endpoint URL for Prod stage for Claytip function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"
  ClaytipFunction:
    Description: "Claytip Lambda Function ARN"
    Value: !GetAtt ClaytipFunction.Arn
  ClaytipFunctionIamRole:
    Description: "Implicit IAM Role created for Claytip function"
    Value: !GetAtt ClaytipFunctionRole.Arn
